<?php

/**
 * @file
 * Code for the AGRI Projects feature.
 */

include_once 'agri_projects.features.inc';

define('AGRI_PROJECTS_USER_TYPE', 'core_user_type');
define('AGRI_PROJECTS_MANAGE_PRIVACY_FLAG', 'agri_privacy_policy');

/**
 * Implements hook_menu().
 */
function agri_projects_menu() {
  $items = array();

  $items['admin/config/agri-project'] = array(
    'title' => 'AGRI Projects Configuration',
    'description' => 'Administer AGRI Projects settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/agri-project/country-privacy'] = array(
    'title' => 'Manage privacy policy',
    'description' => 'Manage privacy policy for the partners of the projects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_projects_country_privacy_config_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => 1,
    'file' => 'includes/agri_projects.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_link_alter().
 */
function agri_projects_menu_link_alter(&$item) {
  if ($item['link_path'] == 'find-connect/project-ideas' && !isset($item['customized'])) {

    // Options to be serialized to set menu link as persistent menu item.
    $options = [
      'alter' => 1,
      'persistent_menu_item' => 1,
      'attributes' =>
        [
          'data-image' => 'lock',
          'data-display-title' => '1',
          'data-hide-children' => 0,
          'data-remove-class' => 0,
        ],
    ];

    // Set "Project Ideas" as persistent menu item.
    $item['options'] = $options;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_innovative_action_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;
  $user = user_load($user->uid);
  if (isset($user->field_firstname[LANGUAGE_NONE]) && isset($user->field_lastname)) {
    $name = $user->field_firstname[LANGUAGE_NONE][0]['value'];
    $surname = $user->field_lastname[LANGUAGE_NONE][0]['value'];
    $form['field_projects_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $name;
    $form['field_projects_surname'][LANGUAGE_NONE][0]['value']['#default_value'] = $surname;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_operational_group_node_form_alter(&$form, &$form_state, $form_id) {
  $form['body'][LANGUAGE_NONE][0]['#description'] = t('Please specify the following type of information: Objectives, Main problem or challenge, Expected results.');
  $form['field_projects_contact_point']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_research_project_node_form_alter(&$form, &$form_state, $form_id) {
  $form['body'][LANGUAGE_NONE][0]['#description'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_project_ideas_node_form_alter(&$form, &$form_state, $form_id) {

  $form['field_projects_deadline']['#access'] = FALSE;
  $form['field_projects_duration']['#access'] = FALSE;
  $form['field_organization_collection']['#access'] = FALSE;

  // Conditional field "Other location".
  $other_location = _agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area');
  $settings = array(
    'agri_projects' => array(
      'other_location' => $other_location,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_projects') . '/js/agri_projects.js';
  // Custom conditional fields validation.
  $form['field_core_other_location']['#element_validate'] = array('_agri_projects_other_location_validate');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function agri_projects_preprocess_field(&$variables) {
  // Set the custom title on the fieldset "field_proj_coordinator_fc".
  if ($variables['element']['#field_name'] == 'field_proj_coordinator_fc') {
    $variables['items'][0]['entity']['#title'] = $variables['element']['#title'];
  }
}

/**
 * Implements hook_node_view().
 */
function agri_projects_node_view($node, $view_mode, $langcode) {

  if ($node->type == 'needs_for_research_from_practice' && $view_mode == 'full') {
    // Hide "Contact person" field_group and fields
    // if "Interested in" checkboxes are not both checked.
    if (isset($node->field_projects_interested_in[LANGUAGE_NONE]) && !count($node->field_projects_interested_in[LANGUAGE_NONE])) {
      hide($node->content['field_projects_name']);
      hide($node->content['field_projects_surname']);
      hide($node->content['field_user_language_spoken']);
      hide($node->content['field_core_email']);
      unset($node->content['#fieldgroups']['group_contact_infomation']);
    }
  }

  if ($node->type == 'project') {

    $has_privacy_flag = FALSE;
    $has_privacy_check = FALSE;

    // EIPAGRI-590 Add a flag to hide Partners details in H2020 Projects.
    // If Project is flagged, hide Project partners information.
    $agri_privacy_policy_flag = flag_get_flag(AGRI_PROJECTS_MANAGE_PRIVACY_FLAG);

    if ($agri_privacy_policy_flag && $agri_privacy_policy_flag->is_flagged($node->nid)) {
      $has_privacy_flag = TRUE;
    }

    // EIPAGRI-507 Hide/show partner details base on national privacy regul.
    $node_wrapper = entity_metadata_wrapper('node', $node);

    if ($node_wrapper->field_proj_project_type->value() == 'Operational group') {
      $country_terms = $node_wrapper->field_proj_geographical_area->value();
      foreach ($country_terms as $country_term) {
        $tids[$country_term->tid] = $country_term->tid;

        $parent_terms = taxonomy_get_parents($country_term->tid);
        foreach ($parent_terms as $parent) {
          if (!empty($parent)) {
            $tids[$parent->tid] = $parent->tid;
          }
        }
      }

      $country_privacy = variable_get('agri_projects_countries_privacy', array());
      if (!empty(array_intersect($tids, $country_privacy))) {
        $has_privacy_check = TRUE;
      }
    }

    if ($has_privacy_flag || $has_privacy_check) {
      // Hide Partners field collections.
      unset($node->content['field_proj_partner_fc']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_needs_for_research_from_practice_node_form_alter(&$form, &$form_state, $form_id) {

  global $user;

  $node = $form_state['node'];
  $node_is_new = (!isset($node->nid) || isset($node->is_new));

  // Pre-fill 'Contact person' fields only if node is new.
  if ($node_is_new && $user->uid) {
    $user = user_load($user->uid);
    $form['field_core_email'][LANGUAGE_NONE][0]['email']['#default_value'] = $user->mail;
    if (isset($user->field_firstname[LANGUAGE_NONE][0])) {
      $form['field_projects_name'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->field_firstname[LANGUAGE_NONE][0]['value'];
    }
    if (isset($user->field_lastname[LANGUAGE_NONE][0])) {
      $form['field_projects_surname'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->field_lastname[LANGUAGE_NONE][0]['value'];
    }
  }

  // Move captcha inside content vertical tab.
  $form['#group_children']['agri_captcha'] = 'group_needs_for_research_content';

  $form['field_projects_interested']['#access'] = FALSE;

  // Conditional field "Other location".
  $other_location = _agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area');
  $settings = array(
    'agri_projects' => array(
      'other_location' => $other_location,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_projects') . '/js/agri_projects.js';
  // Custom conditional fields validation.
  $form['field_core_other_location']['#element_validate'] = array('_agri_projects_other_location_validate');

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_project_node_form_alter(&$form, &$form_state, $form_id) {

  // Change Drupal standard title length.
  $form['title']['#maxlength'] = 150;
  // Add description to drupal title.
  $form['title']['#description'] = t("Please provide the title in its original language.");
  // Hide Project type field in add/edit form.
  $form['field_proj_project_type']['#access'] = FALSE;
  $form['field_proj_partners_categories']['#access'] = FALSE;
  $form['field_proj_og_cross_border']['#access'] = FALSE;
  $form['field_proj_sfc_identification']['#access'] = FALSE;

  // Hide "Internal Keywords" of the project if it is not yet set.
  if (empty($form_state['node']->field_agri_proj_internal_kwords[LANGUAGE_NONE])) {
    $form['field_agri_proj_internal_kwords']['#access'] = FALSE;
  }

  // EIPAGRI-497 - Prevent manual creation of new Operational group projects.
  if (!isset($form['#node']->nid)) {
    unset($form['field_proj_funding_source_list'][LANGUAGE_NONE]['#options'][0]);
  }
  else {
    if ($form['field_proj_funding_source_list'][LANGUAGE_NONE]['#default_value'][0] != '0') {
      unset($form['field_proj_funding_source_list'][LANGUAGE_NONE]['#options'][0]);
    }
  }

  // Hide dynamic field collection fields in project form and set default value.
  $delta = 0;
  $max_delta = $form['field_sfc_proj_summary'][LANGUAGE_NONE]['#max_delta'];

  while ($delta <= $max_delta) {
    $form['field_sfc_proj_summary'][LANGUAGE_NONE][$delta]['field_sfc_proj_sheet_pa'][LANGUAGE_NONE][0]['#access'] = FALSE;
    $form['field_sfc_proj_summary'][LANGUAGE_NONE][$delta]['field_sfc_proj_sheet_pa'][LANGUAGE_NONE][0]['value']['#default_value'] = $delta + 1;
    $delta++;
  }

  // Conditional field "Other location".
  $other_location = _agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area');
  $settings = array(
    'agri_projects' => array(
      'other_location' => $other_location,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');

  // Fix group-proj-partners behaviour.
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_projects') . '/js/agri_projects.js';

  // Custom conditional fields validation.
  $form['field_proj_other_location']['#element_validate'] = array('_agri_projects_other_location_validate');

}

/**
 * Implements hook_field_collection_item_view_alter().
 */
function agri_projects_field_collection_item_view_alter(&$build) {
  if ($build['#view_mode'] == 'full' && $build['#bundle'] == 'field_sfc_proj_summary') {
    $build['#fieldgroups']['group_sfc_proj_practice_abstract'] = clone($build['#fieldgroups']['group_sfc_proj_practice_abstract']);

    // Use sheet number for the label of Practice Abstract.
    $build['#fieldgroups']['group_sfc_proj_practice_abstract']->label .= " " . $build['field_sfc_proj_sheet_pa'][0]['#markup'];
    $build['field_sfc_proj_sheet_pa']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_projects_form_views_exposed_form_alter(&$form, $form_state) {

  if ($form['#id'] == 'views-exposed-form-projects-fsearch-sub-pages-page-1') {

    if ($form['field_proj_project_type']) {

      $form['field_proj_project_type']['#type'] = 'select';
      $form['field_proj_project_type']['#attributes'] = array(
        'size' => 1,
      );
      $form['field_proj_project_type']['#options'] = array(
        '' => t('- Any -'),
        'Operational group' => t('Operational group'),
        'Research project' => t('Research project'),
        'Innovative action' => t('Innovative action'),
      );

    }
  }

  // Attach JS to SFC Projects > Manage Projects view.
  if ($form['#id'] == 'views-exposed-form-agri-projects-manage-projects-page') {
    // Attach js to render flag links as checkboxes in "Manage Projects".
    $form['#attached']['js'][] = drupal_get_path('module', 'agri_projects') . '/js/agri_projects.js';
  }

}

/**
 * Implements hook_search_api_views_query_alter().
 */
function agri_projects_search_api_views_query_alter(&$view, SearchApiViewsQuery &$query) {

  // Alter Search API query to include hidden internal keywords field.
  $views_name = array(
    'projects_indexed_search_sub_pages',
    'agri_digitization_toolbox_projects_indexed_search',
    'agri_stakeholder_projects_page',
  );

  if (in_array($view->name, $views_name) && array_key_exists('field_core_keywords', $view->filter)) {
    $filter = $view->filter['field_core_keywords'];

    if ($filter->options['exposed']) {
      $identifier = $filter->options['expose']['identifier'];
      $group = $filter->options['group'];

      // Fires only if the other field (field_core_keywords) has exposed input.
      if (array_key_exists($identifier, $view->exposed_input)) {
        $query->condition('field_agri_proj_internal_kwords', $view->exposed_input[$identifier], 'IN', $group);
      }
    }
  }
}

/**
 * Importer for "project" from csv.
 *
 * @param string $file
 *   The path to csv file.
 */
function _agri_projects_drush_batch_config($file, $type) {

  drush_print('Start process...');

  $dataset = _agri_core_get_dataset($file);
  $index = 0;

  foreach ($dataset as $value) {
    $index++;
    $operation[] = array(
      'agri_projects_batch_op_callback',
      array(
        $value,
        $type,
      ),
    );
  }

  $batch = array(
    'operations' => $operation,
    'finished' => 'agri_projects_batch_finished_callback',
    'file' => drupal_get_path('module', 'agri_projects') . '/agri_projects_import.batch.inc',
  );

  batch_set($batch);
  $batch = &batch_get();
  $batch['progressive'] = FALSE;

  drush_backend_batch_process();

}

/**
 * Implements hook_node_submit().
 */
function agri_projects_node_submit($node, $form, &$form_state) {
  if ($node->type == 'project') {
    if (isset($node->field_proj_starting_date[LANGUAGE_NONE][0]['show_todate'])) {
      $year = $node->field_proj_starting_date[LANGUAGE_NONE][0]['value'];
      if (drupal_strlen($year) === 4) {
        date_default_timezone_set('UTC');
        $date = mktime(0, 0, 0, '01', '01', $year);
        $node->field_proj_starting_date[LANGUAGE_NONE][0]['value'] = $date;
      }
    }

    if (isset($node->field_proj_end_date[LANGUAGE_NONE][0]['show_todate'])) {
      $year = $node->field_proj_end_date[LANGUAGE_NONE][0]['value'];
      if (drupal_strlen($year) === 4) {
        date_default_timezone_set('UTC');
        $date = mktime(0, 0, 0, '01', '01', $year);
        $node->field_proj_end_date[LANGUAGE_NONE][0]['value'] = $date;
      }
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function agri_projects_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {

  if ($context['entity_type'] == 'node' && $context['bundle'] == 'project') {
    if (isset($layout_render_array['header']['#fields'])) {
      foreach ($layout_render_array['header']['#fields'] as &$field) {
        if ($field['#field_name'] == 'field_agri_proj_internal_kwords') {
          // Use different label for the front-end.
          $field['#title'] = t('Additional keywords');
          return;
        }
      }
    }
  }
}

/**
 * Custom field_core_other_location validation.
 *
 * @param mixed $element
 *   The field array.
 * @param mixed $form_state
 *   The form_state array.
 * @param mixed $form
 *   The form array.
 */
function _agri_projects_other_location_validate($element, &$form_state, $form) {

  if ($form['type']['#value'] == 'project') {
    $other_location = array_column($form_state['values']['field_proj_geographical_area'][LANGUAGE_NONE], 'tid');
  }
  if ($form['type']['#value'] == 'project_ideas' || $form['type']['#value'] == 'needs_for_research_from_practice') {
    $other_location = array_column($form_state['values']['field_core_geographical_area'][LANGUAGE_NONE], 'tid');
  }

  if (in_array(_agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area'), $other_location)
    && empty($element[LANGUAGE_NONE][0]['value']['#value'])) {
    $element['#required'] = TRUE;
    form_error($element, t('@label field is required.',
        array('@label' => $element[LANGUAGE_NONE]['#title']))
    );
  }
}

/**
 * Function to map "partner type" field value to the "user type" taxonomy.
 *
 * @param string $partner_type
 *   Partner type string.
 * @param bool $return_tid
 *   If TRUE, the function return the term tid. Otherwise return the term name.
 *
 * @return bool|mixed
 *   Returns the tid or the name of the term. FALSE if the term does not exist.
 */
function _agri_projects_user_type_mapping($partner_type, $return_tid = TRUE) {

  $partner_type = drupal_strtolower($partner_type);

  $mapping = array(
    'farm holder' => 'Farmer',
    'advisor' => 'Adviser',
    'research institute' => 'Researcher',
    'ngo' => 'Representative of an NGO',
    'sme' => 'SME',
    'other' => 'Other',
  );

  if (isset($mapping[$partner_type])) {
    $term_name = $mapping[$partner_type];

    if ($return_tid) {
      $term = taxonomy_get_term_by_name($term_name, AGRI_PROJECTS_USER_TYPE);
      if (!empty($term)) {
        $term_obj = reset($term);
        return $term_obj->tid;
      }
      else {
        return FALSE;
      }
    }
    else {
      return $term_name;
    }
  }

  return FALSE;
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function agri_projects_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // If there are any operations.
  if (isset($form['select'])) {
    // If SFC Projects view or Manage Projects view.
    if ($form['#form_id'] == 'views_form_agri_sfc_import_moderation_sfc'
      || $form['#form_id'] == 'views_form_agri_projects_manage_projects_page') {
      // Create Manage privacy operations array.
      $manage_privacy_operations = array(
        'select' => array(
          'rules_component::agri_projects_hide_partners_info' => $form['select']['rules_component::agri_projects_hide_partners_info'],
          'rules_component::agri_projects_show_partners_info' => $form['select']['rules_component::agri_projects_show_partners_info'],
        ),
      );

      // Create a fieldset to include "Manage privacy" policy operations.
      _agri_core_custom_vbo_operations_fieldset($form, 'manage_privacy_fieldset', 'fieldset', t('Manage privacy'), FALSE, array(), $manage_privacy_operations);
    }

    if ($form['#form_id'] == 'views_form_agri_projects_manage_projects_page') {
      // If Manage Projects view, hide the whole fieldset.
      $form['select']['#access'] = FALSE;
    }
    elseif ($form['#form_id'] == 'views_form_agri_sfc_import_moderation_sfc') {
      // If SFC Projects view, only hide the operations.
      $form['select']['rules_component::agri_projects_hide_partners_info']['#access'] = FALSE;
      $form['select']['rules_component::agri_projects_show_partners_info']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_permission().
 */
function agri_projects_permission() {
  // Define the permission to access Digitisation backend views.
  return [
    'access manage projects view' => [
      'title' => t('Access Manage Projects View'),
      'description' => t('Allow to filter AGRI Projects and set privacy policy configurations.'),
      'restrict access' => FALSE,
    ],
  ];
}

/**
 * Helper function to reindex (search_api/apachesolr) on flagging/unflagging.
 *
 * @param object $flag
 *   The flag object that executes the action on entity.
 * @param int $entity_id
 *   The id of the entity flagged by loaded flag.
 */
function _agri_projects_reindex_item($flag, $entity_id) {
  // Acts only on "Manage privacy policy" flag.
  if ($flag->name == AGRI_PROJECTS_MANAGE_PRIVACY_FLAG) {
    $node = entity_load_single('node', $entity_id);
    // Flagged/unflagged indexed nodes need to be reindexed to appear in views.
    if ($node->type == 'project') {
      // Immediate reindex the flagged node.
      search_api_track_item_change('node', [$entity_id]);
      // Mark single node for reindex.
      apachesolr_mark_entity('node', $entity_id);
    }
  }
}

/**
 * Implements hook_flag_flag().
 */
function agri_projects_flag_flag($flag, $entity_id, $account, $flagging) {
  // Callback to reindex a Project once it's flagged.
  _agri_projects_reindex_item($flag, $entity_id);
}

/**
 * Implements hook_flag_unflag().
 */
function agri_projects_flag_unflag($flag, $entity_id, $account, $flagging) {
  // Callback to reindex a Project once it's unflagged.
  _agri_projects_reindex_item($flag, $entity_id);
}

/**
 * Implements template_preprocess_flag().
 */
function agri_projects_preprocess_flag(&$variables) {
  // Append anchor to destination link after "Manage privacy" flagging action.
  if (isset($variables['flag']) && $variables['flag']->name == AGRI_PROJECTS_MANAGE_PRIVACY_FLAG) {
    $link = &$variables['link'];
    if (isset($link['query']['destination'])) {
      $flag_id = drupal_html_id(AGRI_PROJECTS_MANAGE_PRIVACY_FLAG);
      $link['query']['destination'] = $link['query']['destination'] . '#' . $flag_id;
      $variables['link_href'] = isset($link['href']) ? check_url(url($link['href'], $link)) : FALSE;
      $variables['flag_id'] = $flag_id;
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function agri_projects_entity_property_info_alter(&$info) {

  $properties = &$info['node']['bundles']['project']['properties'];

  // Define a new text field to be indexed by Search API.
  $properties['field_proj_title'] = array(
    'label' => t("Project title"),
    'description' => t("Project english title or the native fallback."),
    'type' => 'text',
    'getter callback' => '_agri_projects_search_api_custom_project_title',
  );
}

/**
 * Helper function to return data for custom project title field.
 *
 * @param object $item
 *   The item to get fields info from.
 *
 * @return string
 *   The trimmed string to be indexed by Search API.
 */
function _agri_projects_search_api_custom_project_title($item) {
  return trim(isset($item->field_proj_title_eng[LANGUAGE_NONE][0]['value'])
    ? $item->field_proj_title_eng[LANGUAGE_NONE][0]['value'] : $item->title);
}
