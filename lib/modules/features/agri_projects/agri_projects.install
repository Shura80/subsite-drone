<?php

/**
 * @file
 * Install file of the agri_projects feature.
 */

include_once 'agri_projects.install.inc';

/**
 * Implements hook_install().
 */
function agri_projects_install() {

  features_revert(array(
    'agri_projects' => array(
      'conditional_fields',
      'user_permission',
      'user_role',
    ),
  ));

}

/**
 * Implements hook_enable().
 */
function agri_projects_enable() {
  $t = get_t();
  drupal_set_message($t('Agri Projects feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function agri_projects_disable() {
  $t = get_t();
  drupal_set_message($t('Agri Projects %v feature is now inactive on your site.'));
}

/**
 * Implements hook_update().
 */
function agri_projects_update_7009() {
  module_enable(array('field_collection_table'));
  features_revert(array(
    'agri_projects' => array(
      'variable',
      'field',
      'user_permission',
      'ds_field_settings',
      'ds_layout_settings',
      'user_role',
    ),
    'agri_core' => array(
      'variable',
      'field',
      'ds_field_settings',
      'ds_layout_settings',
    ),
  ));
}

/**
 * Revert views component, we updated some configs.
 */
function agri_projects_update_7010() {
  features_revert(array('agri_projects' => array('views')));
}

/**
 * EIPAGRI-138:Remove instance node-project_ideas-field_organization_collection.
 */
function agri_projects_update_7011() {

  $instance = array(
    'field_name' => 'field_organization_collection',
    'entity_type' => 'node',
    'bundle' => 'project_ideas',
  );
  field_delete_instance($instance);
}

/**
 * EIPAGRI-129: Update old roles name before revert permissions.
 */
function agri_projects_update_7012() {
  db_update('role')
    ->fields(array('name' => 'operational group responsible'))
    ->condition('name', 'organic group responsible', '=')
    ->execute();

  db_update('role')
    ->fields(array('name' => 'research project manager'))
    ->condition('name', 'project manager', '=')
    ->execute();
}

/**
 * EIPAGRI-138: Correct mandatory fields.
 */
function agri_projects_update_7014() {
  features_revert(array('agri_projects' => array('field')));
}

/**
 * EIPAGRI-171: Correct mandatory fields.
 */
function agri_projects_update_7015() {
  features_revert(array('agri_projects' => array('field')));
}

/**
 * EIPAGRI-213: Create the field dependency for project_idea CT.
 */
function agri_projects_update_7016() {
  features_revert(array('agri_projects' => array('field')));
  $other = taxonomy_get_term_by_name('Other', 'core_geographical_area');
  if (!empty($other)) {
    $term = reset($other);
    $tid = $term->tid;
    _agri_core_field_dependencies(
      array($tid), array('field_core_geographical_area', 'field_core_other_location'), 'node', 'project_ideas', 'tid'
    );
  }
}

/**
 * EIPAGRI-222: Permissions for authenticated user.
 */
function agri_projects_update_7017() {
  features_revert(array('agri_projects' => array('user_permission')));
}

/**
 * EIPAGRI-245: Update search paths for Projects related content types.
 *
 * Disable some old content types contexts.
 */
function agri_projects_update_7018() {

  // Select  mlid of 'Search needs for research from practice' menu link.
  $reset = db_select('menu_links', 'ml')
    ->fields('ml')
    ->condition('link_title', 'Search needs for research from practice')
    ->condition('link_path', 'find-connect/needs-for-research')
    ->execute()->fetchAssoc();

  // Delete 'Search needs for research from practice' menu link.
  // It will regenerated correctly on menu_rebuild().
  menu_reset_item($reset);

  // Select nids of two project nodes to disable their generated menu links.
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', array('Search Project Ideas', 'Search Interesting Projects'), 'IN')
    ->execute();

  // Loop through query results to construct array of nids.
  while ($result = $query->fetchAssoc()) {
    $nids[] = $result['nid'];
  }

  // Loop through nodes.
  foreach ($nids as $nid) {
    // Load the node object.
    $node = node_load($nid);
    // Set status to 0 (unpublished).
    $node->status = 0;
    // Save the node.
    node_save($node);
  }

  // Find plid for 'Search Project Ideas' old node menu link.
  $query = db_select('menu_links', 'ml')
    ->fields('ml', array('plid'))
    ->condition('link_title', 'Search Project Ideas')
    ->condition('module', 'menu')
    ->execute();

  while ($result = $query->fetchAssoc()) {

    // Update plid for events_list 'Search Project Ideas' menu link.
    db_update('menu_links')
      ->fields(array('plid' => $result['plid']))
      ->condition('link_title', 'Search Project Ideas')
      ->condition('module', 'system')
      ->execute();
  }

  // Find plid for 'Search Interesting Projects' old node menu link.
  $query = db_select('menu_links', 'ml')
    ->fields('ml', array('plid'))
    ->condition('link_title', 'Search Interesting Projects')
    ->condition('module', 'menu')
    ->execute();

  while ($result = $query->fetchAssoc()) {

    // Update plid for events_list 'Search Interesting Projects' menu link.
    db_update('menu_links')
      ->fields(array('plid' => $result['plid']))
      ->condition('link_title', 'Search Interesting Projects')
      ->condition('module', 'system')
      ->execute();
  }

  // Rebuild menu and clear menu cache.
  menu_rebuild();
  menu_cache_clear_all();

  // Disable "projects-innovative-action-full-node" context.
  $context = context_load('projects-innovative-action-full-node');
  ctools_export_set_object_status($context);

  // Disable "projects-operational-group-full-node" context.
  $context = context_load('projects-operational-group-full-node');
  ctools_export_set_object_status($context);

  // Disable "projects-research-project-full-node" context.
  $context = context_load('projects-research-project-full-node');
  ctools_export_set_object_status($context);

}

/**
 * EIPAGRI-210: Disable old "Add projects" node.
 */
function agri_projects_update_7019() {

  /*
   * Disable the fake projects page and menu item.
   */
  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', "Add projects")
    ->execute()->fetchField();

  node_delete($nid);

  // Update link 'Publish innovative action' to 'Share interesting projects'.
  db_update('menu_links')
    ->fields(array(
      'link_title' => 'Share your project',
      'link_path' => 'node/add/project',
    ))
    ->condition('link_title', 'Publish an innovative action')
    ->condition('link_path', 'node/add/innovative-action')
    ->condition('menu_name', 'menu-core-user-quicklinks')
    ->execute();
}

/**
 * EIPAGRI-210: Updates Share projects entry page (buttons html).
 */
function agri_projects_update_7020() {

  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', "Share with us")
    ->execute()->fetchField();

  $node = node_load($nid);
  $body_update = <<<'content'
   <h3>Welcome to your interactive EIP-AGRI.&nbsp; Here you can share ideas for new projects or information on projects you have already started, and specify needs for research from practice.</h3><hr><p>Before proceeding, please <a href="/eip/agriculture/node/279"><strong>click here</strong> </a>to learn the difference between Needs for Research from Practice and an Innovative Project.</p><hr><p><a class="btn btn-block btn-lg btn-success" href="/eip/agriculture/node/add/needs-for-research-from-practice">Share your research needs</a> <a class="btn btn-block btn-lg btn-info" href="/eip/agriculture/user">Register/Create an account</a></p><hr><p>You must be a <a href="/eip/agriculture/user">registered user</a> to be able to access the following areas:</p><p><a class="btn btn-block btn-lg btn-warning" href="/eip/agriculture/node/add/project">Share your projects</a> <a class="btn btn-block btn-lg btn-primary" href="/eip/agriculture/node/add/project-ideas">Share your project ideas</a></p><p>&nbsp;</p>
content;

  $node->body[LANGUAGE_NONE][0]['value'] = $body_update;
  $node->body[LANGUAGE_NONE][0]['safe_value'] = check_markup($body_update, 'full_html');

  $node->status = 1;

  // Save the node.
  node_save($node);

  // Set published status in workbench moderation.
  workbench_moderation_moderate($node, 'published');
}

/**
 * EIPAGRI-210: Disable old 'Share interesting projects' node and menu item.
 *
 * Create new menu item for 'Share interesting projects'.
 */
function agri_projects_update_7021() {

  $nid = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', 'Share interesting projects')
    ->execute()->fetchField();

  // Load the node object.
  $node = node_load($nid);
  // Set status to 0 (unpublished).
  $node->status = 0;
  // Save the node.
  node_save($node);

  // Select parent id for new menu item from other children item.
  $plid = db_select('menu_links', 'ml')
    ->fields('ml', array('plid'))
    ->condition('link_title', 'Share project ideas')
    ->execute()->fetchField();

  // Save new 'Share interesting projects' menu link.
  $item = array(
    'menu_name' => 'main-menu',
    'plid' => $plid,
    'module' => 'menu',
    'customized' => 1,
    'link_path' => 'node/add/project',
    'link_title' => 'Share interesting projects',
    'weight' => -50,
  );

  menu_link_save($item);

  // Rebuild menu and clear menu cache.
  menu_rebuild();
  menu_cache_clear_all();

}

/**
 * EIPAGRI-245: Update Meeting Point block links.
 */
function agri_projects_update_7022() {
  // Finf id (bid) of 'Meeting point intro' block.
  $bid = db_select('block_custom', 'bc')
    ->fields('bc', array('bid'))
    ->condition('info', 'Meeting point intro')
    ->execute()->fetchField();

  $body_update = <<<'content'
    <h3><strong>Welcome to the Meeting Point</strong></h3><h3>Bringing people, ideas and resources together to catalyse innovation in agriculture</h3><hr><h4><font color="#333333">Search here for:</font></h4><ul><li><a href="/eip/agriculture/find-connect/projects"><strong><u>Interesting Projects</u></strong>:</a> Best practices in agricultural innovation, cooperation between farmers and scientists, inspiring project results to help you build a successful innovation project.</li><li><a href="/eip/agriculture/find-connect/project-ideas"><strong><u>Project Ideas:</u></strong></a> a list of people with project ideas; some may be similar to yours. Browse the list for an overview of the projects that farmers, advisors, and others… want to develop. Who knows, maybe you can help each other out or<a href="/eip/agriculture/find-people"> <strong>find the right partner to start a project</strong></a><strong>.</strong></li><li><b><u><a href="/eip/agriculture/find-connect/needs-for-research">Needs for research from practice:</a></u> </b>Browse the list of knowledge needs that other people shares. You can find ways to cooperate with them and start new projects by contributing with your experience or innovative ideas.</li><li><a href="/eip/agriculture/find-connect/funding-opportunities"><strong><u>Funding Opportunities</u></strong></a>.</li><li><a href="/eip/agriculture/content/interesting-links"><strong><u>Interesting links:</u></strong></a> other interesting databases and websites that may be helpful.</li><li>Contribute to the EIP-AGRI network: you are very welcome to share your project ideas, interesting projects, or other online resources with us through the <a href="/eip/agriculture/content/share-us"><strong><u>Share</u></strong></a> section.</li></ul><div><hr align="left" size="1" width="33%"><div><div id="_com_1">&nbsp;<p>&nbsp;</p></div></div></div>
content;

  // Update 'Meeting point intro' block.
  db_update('block_custom')
    ->fields(array('body' => $body_update))
    ->condition('bid', $bid)
    ->execute();
}

/**
 * Update field 'field_projects_language' with missing option "Other".
 */
function agri_projects_update_7023() {

  $field_to_update = 'field_projects_language';

  // Get the field info.
  $info = field_info_field($field_to_update);

  // Get a reference to the values.
  $values = &$info['settings']['allowed_values'];

  // Add new allowed value.
  $values['other'] = 'Other';

  // Save the field.
  field_update_field($info);
}

/**
 * Update Project Manager role permissions.
 */
function agri_projects_update_7024() {
  $role = user_role_load_by_name('project manager');
  user_role_grant_permissions($role->rid, array(
    'moderate content from draft to needs_review',
    'moderate content from needs_review to draft',
    'moderate content from needs_review to validated',
    'use workbench_moderation my drafts tab',
    'use workbench_moderation needs review tab',
    'view moderation messages',
  ));
}

/**
 * Remove Field collection from project_ideas and shared fields from project.
 */
function agri_projects_update_7025() {
  // This field now is a simple textarea on project_ideas.
  if ($project_ideas_instance = field_info_instance('node', 'field_organization_collection', 'project_ideas')) {
    field_delete_instance($project_ideas_instance);
  }
  // Remove shared field that conflict with field collections conditionals.
  if ($project_instance = field_info_instance('node', 'field_core_geographical_area', 'project')) {
    field_delete_instance($project_instance);
  }
  // Remove shared field that conflict with field collections conditionals.
  if ($project_instance = field_info_instance('node', 'field_core_other_location', 'project')) {
    field_delete_instance($project_instance);
  }
}

/**
 * QA Fixes Date field migration.
 *
 * Update datetime fields to datestamp.
 * taken From update 7193 of cce_basic_config and adapted to Features API 2.0
 */
function agri_projects_update_7210() {

  // $content type : content type that contains fields to replace.
  // $module_name : module that contains fields.
  $content_types = array(
    'innovative_action',
    'research_project',
    'project_ideas',
  );

  foreach ($content_types as $content_type) {
    $module_name = drupal_basename(__FILE__, '.install');
    // Get db fields instances of content type.
    $fields_instances = field_info_instances('node', $content_type);

    // Get feature fields config & instance.
    module_load_include('inc', $module_name, $module_name . '.features.field_base');
    if (function_exists($module_name . '_field_default_field_bases')) {
      $fields_features_info = call_user_func($module_name . '_field_default_field_bases');
    }

    // Migration.
    foreach ($fields_instances as $field_name => $field_instance) {
      // Get db field config.
      $field_info = field_info_field($field_name);
      // Get feature field config.
      $field_features_info = NULL;

      if (isset($fields_features_info[$field_name])) {
        $field_features_info = $fields_features_info[$field_name]['settings'];
      }

      // Update only our fields defines to 'datestamp' in feature.field.
      if ($field_info['type'] == 'datetime' && $field_info['locked']) {
        foreach ($field_info['storage']['details']['sql'] as $info_sql) {
          $table_name = array_shift(array_keys($info_sql));

          foreach ($info_sql[$table_name] as $column_name) {

            if (field_has_data($field_info)) {
              // There is data: migrate data and update column to int.
              watchdog('system',
                'Update the  column %column_name of table %table_name: migrate datas and update to datestamp.',
                array('%column_name' => $column_name, '%table_name' => $table_name), WATCHDOG_WARNING);

              // Create a temporary date field.
              $param = array(
                'type' => 'int',
                'not null' => FALSE,
                'default' => 0,
              );
              db_add_field($table_name, $column_name . '_temp', $param);

              db_update($table_name)
                ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
                ->execute();

              // Delete old column.
              db_drop_field($table_name, $column_name);
              db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

            }
            else {
              // If there is no data: just update column to int.
              watchdog('system', 'Update the  column %column_name of table %table_name: update to datestamp.',
                array('%column_name' => $column_name, '%table_name' => $table_name), WATCHDOG_WARNING);
              db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
            }
          }
        }

        watchdog('system', 'Saving field config of %field_name',
          array('%field_name' => $field_name), WATCHDOG_INFO);
        db_update('field_config')
          ->fields(array('type' => 'datestamp'))
          ->condition('id', $field_info['id'])
          ->execute();

        // Error logs.
      }
      elseif ($field_info['type'] == 'datestamp') {
        watchdog('system', 'Field %field_name has been already converted to UNIX timestamp',
          array('%field_name' => $field_name), WATCHDOG_WARNING);

      }
      elseif ($field_info['type'] == 'datetime') {
        if (!$field_features_info) {
          watchdog('system', 'Field %field_name not found in %module_name.features.field_base.inc',
            array('%field_name' => $field_name, '%module_name' => $module_name), WATCHDOG_WARNING);
        }
        elseif ($field_features_info['type'] != 'datestamp') {
          watchdog('system', 'Field %field_name is not a datestamp in %module_name.features.field_base.inc',
            array('%field_name' => $field_name, '%module_name' => $module_name), WATCHDOG_WARNING);
        }
      }
    }
    field_cache_clear();
  }

}

/**
 * Enable the AGRI SFC project import feature.
 */
function agri_projects_update_7211() {
  module_enable(array('agri_sfc_project_import'));
}

/**
 * Set "workbench_moderation" permission for the role "project manager".
 */
function agri_projects_update_7212() {
  features_revert(array('agri_projects' => array('user_permission')));
}

/**
 * Increased max_length for some text fields.
 */
function agri_projects_update_7213() {

  $field_length = 255;
  $fields = array(
    'field_proj_editor_of_text',
    'field_proj_title_eng',
    'field_projects_address',
    'field_projects_telephone',
  );

  foreach ($fields as $field_name) {

    db_change_field('field_data_' . $field_name, $field_name . '_value', $field_name . '_value', array(
      'type' => 'varchar',
      'length' => $field_length,
    ));

    // Next, update the field revisions table configuration.
    db_change_field('field_revision_' . $field_name, $field_name . '_value', $field_name . '_value', array(
      'type' => 'varchar',
      'length' => $field_length,
    ));

    // Update the field_config table.
    $config = db_select('field_config', 'fc')
      ->fields('fc', array('data'))
      ->condition('fc.field_name', $field_name, '=')
      ->execute()
      ->fetchAssoc();

    $config_array = unserialize($config['data']);
    $config_array['settings']['max_length'] = $field_length;
    $config = serialize($config_array);
    db_update('field_config')
      ->fields(array('data' => $config))
      ->condition('field_name', $field_name)
      ->execute();
  }

  features_revert(array(
    'agri_projects' => array('field_base', 'field_instance'),
  ));
}

/**
 * Deleted field "field_proj_rp_project_status".
 */
function agri_projects_update_7214() {

  $field = 'field_proj_rp_project_status';

  $results = db_select('field_data_' . $field, 'ps')
    ->fields('ps', array('entity_id', $field . '_value'))
    ->execute();

  foreach ($results as $row) {
    $node = node_load($row->entity_id);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $node_wrapper->field_proj_og_project_status->set($row->field_proj_rp_project_status_value);
    $node_wrapper->save();
  }

  field_delete_field($field);
}

/**
 * Delete old projects user roles and set partners privacy for Germany.
 */
function agri_projects_update_7215() {

  // Delete old projects user roles.
  $roles = array(
    'operational group responsible',
    'research project manager',
  );

  foreach ($roles as $role) {
    user_role_delete($role);
  }

  // Set partners privacy for Germany.
  $term = taxonomy_get_term_by_name('Germany', 'core_geographical_area');
  if (!empty($term)) {
    $term = reset($term);
    $default_value = array(
      $term->tid => $term->tid,
    );
    variable_set('agri_projects_countries_privacy', $default_value);
  }
}

/**
 * EIPAGRI-553, EIPAGRI-554, EIPAGRI-511, EIPAGRI-557.
 */
function agri_projects_update_7216() {
  $t = get_t();

  $proj_ta_fields = array(
    'field_proj_problems',
    'field_proj_problems_eng',
    'field_proj_desc',
    'field_proj_desc_eng',
    'field_proj_coordinator',
    'field_proj_ia_contact_person',
    'field_proj_rp_partners',
    'field_proj_ia_participants',
    'field_proj_additional_comments',
    'field_proj_additional_info',
    'field_proj_results',
    'field_proj_results_eng',
    'field_proj_desc_context',
    'field_sfc_proj_results',
    'field_sfc_proj_results_eng',
  );

  foreach ($proj_ta_fields as $field) {
    $table = 'field_data_' . $field;
    $column = $field . '_format';
    $value = $field . '_value';

    db_update($table)
      ->fields(array($column => 'plain_text'))
      ->isNull($column)
      ->execute();

    db_delete($table)
      ->condition($value, '', '=')
      ->execute();
  }

  $proj_tf_fields = array(
    'field_proj_title_eng',
    'field_proj_other_location',
    'field_proj_rp_acronym',
    'field_projects_name',
    'field_projects_surname',
    'field_projects_address',
    'field_projects_telephone',
  );

  foreach ($proj_tf_fields as $field) {
    $table = 'field_data_' . $field;
    $value = $field . '_value';

    db_delete($table)
      ->condition($value, '', '=')
      ->execute();
  }

  $field_value = array(
    'Farm holder',
    'Advisor',
    'Research institute',
    'Other',
  );

  $query = db_update('field_data_field_organization_partner_type')
    ->expression('field_organization_partner_type_value', "LOWER(field_organization_partner_type_value)")
    ->condition('field_organization_partner_type_value', $field_value);
  $row_affected = $query->execute();

  drupal_set_message($t('field_organization_partner_type => %row', array('%row' => $row_affected)));

  $query = db_update('field_data_field_projects_partner_type')
    ->expression('field_projects_partner_type_value', "LOWER(field_projects_partner_type_value)")
    ->condition('field_projects_partner_type_value', $field_value);
  $row_affected = $query->execute();

  drupal_set_message($t('field_projects_partner_type => %row', array('%row' => $row_affected)));

  // Enable modules 'field_collection_fieldset' and 'agri_proj_migrate'.
  module_enable(
    array(
      'field_collection_fieldset',
      'agri_proj_migrate',
    )
  );
}

/**
 * Delete old fields and disable 'agri_proj_migrate' module.
 */
function agri_projects_update_7217() {
  // Disable "agri_proj_migrate" features.
  $module_name = 'agri_proj_migrate';
  if (module_exists($module_name)) {
    module_disable(array($module_name));
    drupal_uninstall_modules(array($module_name));
  }

  // Delete fields.
  $fields_to_delete = array(
    'field_projects_partner_type',
    'field_projects_telephone',
    'field_projects_address',
    'field_proj_ia_participants',
    'field_proj_rp_partners',
    'field_proj_coordinator',
    'field_proj_results',
    'field_proj_results_eng',
    'field_core_email',
    'field_projects_name',
    'field_projects_surname',
    'field_organization_collection',
  );

  foreach ($fields_to_delete as $field_name) {
    if ($instance = field_info_instance('node', $field_name, 'project')) {
      field_delete_instance($instance);
    }
  }

  field_purge_batch(count($fields_to_delete));
}

/**
 * Delete "projects_blocks" view and revert features component.
 */
function agri_projects_update_7218() {
  // Get and delete the old views "projects_blocks".
  if ($view = views_get_view('projects_blocks')) {
    views_delete_view($view);
  }

  // Revert "views" component.
  features_revert(array(
    'agri_projects' => array(
      'views_view',
    ),
  ));
}
