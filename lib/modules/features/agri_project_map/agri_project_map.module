<?php

/**
 * @file
 * Code for the AGRI Project Map feature.
 */

include_once 'agri_project_map.features.inc';

/**
 * Implements hook_menu().
 */
function agri_project_map_menu() {
  $items['ajax/project-eu-map/%'] = array(
    'title' => 'EU map - project result',
    'page callback' => 'agri_project_map_eumap_callback',
    'page arguments' => array(2),
    'access arguments' => array(
      'access content',
    ),
    'delivery callback' => 'agri_project_map_basic_print',
    'type' => MENU_CALLBACK,
  );

  // Administration page.
  $items['admin/config/services/agri-project-map'] = array(
    'title' => 'Agri project map settings',
    'description' => 'Configuration Webtools path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_project_map_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'agri_project_map.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Custom callback for the views "projects_map - block_result".
 *
 * @param string $nuts_code
 *   The ISO nuts code.
 *
 * @return mixed
 *   The HTML output of the view.
 */
function agri_project_map_eumap_callback($nuts_code) {

  $query_parameters = drupal_get_query_parameters();
  if (isset($query_parameters['view-display']) && !empty($query_parameters['view-display']) && !empty($nuts_code)) {

    switch ($query_parameters['view-display']) {
      case 'block_eu_map_prj_tn':
        $display = 'block_result_tn';
        break;

      case 'block_eu_map_prj_op':
        $display = 'block_result_op';
        break;

      case 'block_eu_map_prj_mp':
        $display = 'block_result_mp';
        break;

      default:
        $display = 'default';
    }

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'nuts_regions')
      ->fieldCondition('nuts_code', 'value', $nuts_code, '=');

    $result = $query->execute();
    if (!empty($result) && isset($result['taxonomy_term'])) {
      $term_tid = key($result['taxonomy_term']);
      $term = taxonomy_term_load($term_tid);
      if ($term->nuts_level[LANGUAGE_NONE][0]['value'] == 3) {

        $arguments = array($term_tid);
        $view = views_get_view('projects_map');
        $view->set_display($display);
        $view->set_arguments($arguments);
        $view->pre_execute();
        $view->execute();

        $result = array(
          'title' => array(
            '#type' => 'markup',
            '#prefix' => '<div class="panel-default">',
            '#markup' => '<div class="panel-heading">' . $term->name . '</div>',
            '#suffix' => '</div>',
          ),
          'result' => array(
            '#type' => 'markup',
            '#markup' => $view->render(),
          ),
        );

        $content = '<div class="project-stakeholder-block">' . drupal_render($result) . '</div>';
        return $content;
      }
    }
  }

  drupal_not_found();
}

/**
 * Delivery callback for the views "projects_map - block_result".
 *
 * @param string $page_callback_result
 *   The HTML output from ajax callback.
 *
 * @see drupal_deliver_html_page()
 */
function agri_project_map_basic_print($page_callback_result) {
  print $page_callback_result;
}

/**
 * Implements hook_views_pre_render().
 */
function agri_project_map_views_pre_render(&$view) {
  $brexit_visibility = variable_get('agri_core_brexit_visibility', FALSE);

  // First, check if the disclaimer should be shown.
  if ($brexit_visibility) {
    // Show Brexit Disclaimer under Stakeholder Areas Maps.
    $brexit_disclaimer = _agri_core_render_brexit_disclaimer();

    if ($brexit_disclaimer) {
      if ($view->name == 'projects_map') {
        switch ($view->current_display) {
          case 'block_eu_map_prj_op':
          case 'block_eu_map_prj_tn':
          case 'block_eu_map_prj_mp':
            $view->attachment_after = drupal_render($brexit_disclaimer);
            break;
        }
      }
    }
  }
}
