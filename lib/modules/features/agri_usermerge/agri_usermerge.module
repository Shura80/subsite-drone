<?php

/**
 * @file
 * Code for the AGRI user merge ECAS feature.
 */

include_once 'agri_usermerge.features.inc';

/**
 * Implements hook_permission().
 */
function agri_usermerge_permission() {
  return array(
    'administer_agri_usermerge' => array(
      'title' => t('Merge user DRUPAL/ECAS'),
      'description' => t('Access to features that allow to merge DRUPAL/ECAS users.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function agri_usermerge_menu() {
  $items['admin/config/people/agri_usermerge'] = array(
    'title' => 'AGRI user merge settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_usermerge_form'),
    'access arguments' => array('administer_agri_usermerge'),
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function agri_usermerge_form($form, $form_state) {

  $options = array();
  $header = array(
    'drupal_account' => t('Drupal account to block'),
    'ecas_account' => t('ECAS account to keep'),
  );

  $users_duplicated = agri_usermerge_get_users_duplicated();
  foreach ($users_duplicated as $key => $value) {

    unset($value['block']['module']);
    unset($value['keep']['module']);
    unset($value['block']['field_user_merged_value']);
    unset($value['keep']['field_user_merged_value']);
    $value['block']['link'] = l(t('View'), 'user/' . $value['block']['uid']);
    $value['keep']['link'] = l(t('View'), 'user/' . $value['keep']['uid']);
    $value['block']['uid'] = t('UID: @uid', array('@uid' => $value['block']['uid']));
    $value['keep']['uid'] = t('UID: @uid', array('@uid' => $value['keep']['uid']));
    $value['block']['name'] = t('Username: @name', array('@name' => $value['block']['name']));
    $value['keep']['name'] = t('Username: @name', array('@name' => $value['keep']['name']));
    $value['block']['mail'] = t('Email: @mail', array('@mail' => $value['block']['mail']));
    $value['keep']['mail'] = t('Email: @mail', array('@mail' => $value['keep']['mail']));

    $options[$key] = array(
      'drupal_account' => theme('item_list', array('items' => $value['block'])),
      'ecas_account' => theme('item_list', array('items' => $value['keep'])),
    );
  }

  drupal_set_message(t('WARNING! This operation is irreversible.'), 'warning');

  $form['users_count'] = array(
    '#markup' => t('Users to merge: @count', array(
      '@count' => count($users_duplicated),
    )),
  );

  $form['users_revision'] = array(
    '#type' => 'tableselect',
    '#title' => 'My Selector',
    '#header' => $header,
    '#options' => $options,
    '#multiple' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Merge accounts'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function agri_usermerge_form_submit($form, $form_state) {
  $users_to_merge = array();

  foreach ($form_state['values']['users_revision'] as $value) {
    if ($value != 0) {
      $users_to_merge[] = explode('_', $value);
    }
  }

  $batch = array(
    'operations' => array(
      array('agri_usermerge_batch_merge_callback', array($users_to_merge)),
      array('agri_usermerge_batch_flag_callback', array()),
    ),
    'finished' => 'agri_usermerge_batch_finished',
    'title' => t('Processing user merge'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Error!'),
    'file' => drupal_get_path('module', 'agri_usermerge') . '/agri_usermerge.batch.inc',
  );

  // Disable og rules.
  $og_rules = rules_config_load('agri_og_administration_member_subscribe_active');
  $og_rules->active = FALSE;
  $og_rules->save();

  batch_set($batch);
}

/**
 * Get users with relative EU-Login account.
 */
function agri_usermerge_get_users_duplicated() {

  $users_duplicated = array();
  $users_to_block = array();
  $users_to_keep = array();

  $users_query = db_select('users', 'u');
  $users_query->leftJoin('authmap', 'a', 'u.uid = a.uid');
  $users_query->leftJoin('field_data_field_user_merged', 'um', 'u.uid = um.entity_id');
  $users_query->innerJoin('users', 'u2', 'u2.mail = u.mail AND u.uid <> u2.uid');
  $users_query->fields('u', array(
    'uid',
    'name',
    'mail',
  ));
  $users_query->fields('a', array(
    'module',
  ));
  $users_query->fields('um', array(
    'field_user_merged_value',
  ));
  $users_result = $users_query->execute()
    ->fetchAll();

  foreach ($users_result as $user) {

    $user->mail = drupal_strtolower($user->mail);

    if ($user->module == 'ecas') {
      $users_to_keep[$user->uid] = (array) $user;
    }

    if (is_null($user->module)) {
      $user->module = 'drupal';
      $users_to_block[$user->uid] = (array) $user;
    }
  }

  $search_block = array_column($users_to_block, 'mail', 'uid');
  $search_keep = array_column($users_to_keep, 'mail', 'uid');

  foreach ($search_block as $uid_block => $mail_block) {
    $match = array_keys($search_keep, $mail_block, TRUE);
    if (!empty($match) && count($match) == 1) {

      if ($users_to_block[$uid_block]['field_user_merged_value'] == 1) {
        unset($users_to_block[$uid_block]);
        unset($users_to_keep[$match[0]]);
      }
      else {
        $key = $uid_block . '_' . $match[0];
        $users_duplicated[$key]['block'] = $users_to_block[$uid_block];
        $users_duplicated[$key]['keep'] = $users_to_keep[$match[0]];
      }
    }
  }

  return $users_duplicated;

}

/**
 * Merges two accounts.
 *
 * @param object $user_to_delete
 *   A fully loaded user object that will be merged and blocked or deleted.
 * @param object $user_to_keep
 *   A fully loaded user object that will be merged and retained.
 * @param string $action
 *   The action to exec (block or delete).
 */
function agri_usermerge_usermerge_do($user_to_delete, $user_to_keep, $action = 'delete') {
  // Build (but not display) data-review form.
  usermerge_load_includes();
  $review_form_state['values']['user_to_delete'] = $user_to_delete;
  $review_form_state['values']['user_to_keep'] = $user_to_keep;

  // Allows to call the data-review table instead of the account-selection form.
  $review_form_state['form_page'] = 'review_table';
  $review_form = usermerge_merge_form(array(), $review_form_state);

  $review_form_state['page_values']['merge_form'] = $review_form_state['values'];
  $review = array_intersect_key($review_form['review'], array_flip(element_children($review_form['review'])));

  foreach ($review as $component => $items) {
    if (isset($items['#value'])) {
      $review_form_state['values'][$component] = $items['#value'];
    }
    else {
      $items = array_intersect_key($items, array_flip(element_children($items)));

      foreach ($items as $name => $properties) {

        if (isset($properties['options']['#options'])) {
          // If the property has a merge options, merge data.
          if (isset($properties['options']['#options']['merge']) && $properties['options']['#options']['merge'] == 'merge') {
            $review_form_state['values']['review'][$component][$name]['options'] = 'merge';
          }
          else {

            if (empty($properties['options']['#options']['user_to_keep']) && !empty($properties['options']['#options']['user_to_delete'])) {
              $review_form_state['values']['review'][$component][$name]['options'] = 'user_to_delete';
            }
            else {
              $review_form_state['values']['review'][$component][$name]['options'] = 'user_to_keep';
            }

          }

        }
        else {
          unset($properties['property_name'], $properties['options']);

          if (count($properties)) {
            foreach ($properties as $property_name => $property) {
              if (isset($property['#value'])) {
                $review_form_state['values']['review'][$component][$name][$property_name] = $property['#value'];
              }
            }
          }
        }
      }
    }
  }

  $review_form_state['page_values']['merge_form']['usermerge_user_delete_action'] = $action;

  // Merge accounts.
  drupal_form_submit('usermerge_merge_form', $review_form_state);
}

/**
 * Implements hook_usermerge_actions_supported().
 */
function agri_usermerge_usermerge_actions_supported() {
  return array(
    'og-user-node' => t('Choosing which og group should be kept, discarded, or merged.'),
  );
}

/**
 * Implements hook_usermerge_build_review_form_elements().
 */
function agri_usermerge_usermerge_build_review_form_elements($review, $account_properties, $user_to_delete, $user_to_keep) {
  $og_node_user_to_delete = 0;
  $og_node_user_to_keep = 0;

  if (isset($user_to_delete->og_user_node) && !empty($user_to_delete->og_user_node)) {
    $og_node_user_to_delete = count($user_to_delete->og_user_node[LANGUAGE_NONE]);
  }

  if (isset($user_to_keep->og_user_node) && !empty($user_to_keep->og_user_node)) {
    $og_node_user_to_keep = count($user_to_keep->og_user_node[LANGUAGE_NONE]);
  }

  $properties = $account_properties['og_user_node'];

  $review['og'] = array(
    '#tree' => TRUE,
    '#theme' => 'usermerge_data_review_form_table',
    '#title' => $properties['title'],
    'og_user_node' => array(
      'property_name' => array(
        '#type' => 'markup',
        '#markup' => t('Og group node'),
      ),
      'options' => array(
        '#type' => 'radios',
        '#options' => array(
          'user_to_delete' => t('Member of @count group', array('@count' => $og_node_user_to_delete)),
          'user_to_keep' => t('Member of @count group', array('@count' => $og_node_user_to_keep)),
          'merge' => t('merge'),
        ),
        '#default_value' => 'merge',
      ),
    ),
  );

  if (isset($properties['description'])) {
    $review['og_user_node']['#description'] = $properties['description'];
  }

  return $review;
}

/**
 * Implements hook_usermerge_account_properties_alter().
 */
function agri_usermerge_usermerge_account_properties_alter(&$properties, $user_to_delete, $user_to_keep, $action) {
  unset($properties['other']['items']['og_user_node']);
}

/**
 * Implements hook_usermerge_account_properties().
 */
function agri_usermerge_usermerge_account_properties($user_to_delete, $user_to_keep, $action) {
  $account_properties['og_user_node'] = array(
    'title' => t('Organic Group'),
    'items' => array(
      'og' => array(
        'name' => 'og_user_node',
        'criterion' => 'merge',
      ),
    ),
  );

  return $account_properties;
}

/**
 * Implements hook_usermerge_merge_accounts().
 */
function agri_usermerge_usermerge_merge_accounts($user_to_delete, $user_to_keep, $review) {

  $merged_account = array();

  if (!empty($user_to_keep->og_user_node)) {
    $merged_account['og_user_node'] = $user_to_keep->og_user_node;
  }

  if (isset($review['og']) && $review['og']['og_user_node']['options'] == 'merge') {
    if ($groups = og_get_groups_by_user($user_to_delete, 'node')) {
      foreach ($groups as $group_id) {
        // Add the user to the group.
        og_group('node', $group_id, array(
          'entity type' => 'user',
          'entity' => $user_to_keep->uid,
          'membership type' => OG_MEMBERSHIP_TYPE_DEFAULT,
        ));

        // Assign the role.
        $roles = og_get_user_roles('node', $group_id, $user_to_delete->uid, FALSE, FALSE);
        if ($rid = array_search(OG_ADMINISTRATOR_ROLE, $roles)) {
          og_role_grant('node', $group_id, $user_to_keep->uid, $rid);
        }

        $merged_account['og_user_node'][LANGUAGE_NONE][]['target_id'] = $group_id;
      }
    }
  }

  return $merged_account;

}

/**
 * Implements hook_views_query_alter().
 */
function agri_usermerge_views_query_alter(&$view, &$query) {
  $display = array(
    'merged_user',
    'unmerged_user',
  );

  if ($view->name == 'agri_usermerge_drupal_account' && in_array($view->current_display, $display)) {

    $join = new views_join();
    $join->table = 'authmap';
    $join->field = 'uid';
    $join->left_table = 'users';
    $join->left_field = 'uid';
    $join->type = 'LEFT';

    $query->add_relationship('authmap', $join, 'users');
    $query->add_where(1, 'authmap.module', NULL, 'IS NULL');
  }

  if ($view->current_display == 'unmerged_user') {
    $join = new views_join();
    $join->table = 'field_data_field_user_merged';
    $join->field = 'entity_id';
    $join->left_table = 'users';
    $join->left_field = 'uid';
    $join->type = 'LEFT';

    $query->add_relationship('field_data_field_user_merged', $join, 'users');

    $or_condition = db_or()
      ->condition('field_data_field_user_merged.field_user_merged_value', '1', '<>')
      ->isNull('field_data_field_user_merged.field_user_merged_value');
    $query->add_where(1, $or_condition);
  }
}
