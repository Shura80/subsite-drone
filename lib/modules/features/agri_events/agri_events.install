<?php

/**
 * @file
 * Install file for the agri_events feature.
 */

/**
 * Implements hook_install().
 */
function agri_events_install() {

  features_revert(array('agri_events' => array('user_role')));
  $role = user_role_load_by_name('event manager');
  user_role_grant_permissions($role->rid, array(
    'create event content',
    'edit own event content',
    'delete own event content',
  ));

  // Make sure that all exported vocabularies are present on
  // current installation.
  features_revert(array('agri_events' => array('taxonomy')));

  $voc_machine_name = 'event_type';
  $event_types = taxonomy_vocabulary_machine_name_load($voc_machine_name);
  $event_types_vid = $event_types->vid;

  // Set Colors taxonomy support and specific vocabulary settings enabled.
  variable_set('colors_taxonomy_term_enabled', 1);
  variable_set('colors_taxonomy_term_' . $event_types_vid . '_enabled', 1);

  // Adding default "Event type" terms.
  $terms = array(
    'EIP-AGRI Events' => array(
      'EIP-AGRI Focus Group',
      'EIP-AGRI seminar',
      'EIP-AGRI workshop',
    ),
    'Other European events' => array(
      'Conference',
      'Field day',
      'Seminar',
      'Subgroup on Innovation meetings',
      'Workshop',
      'Other',
    ),
  );

  $terms_color = array(
    'EIP-AGRI Events' => array(
      'background' => '#61a984',
      'border' => '#61a984',
      'text' => '#ffffff',
    ),
    'Other European events' => array(
      'background' => '#2d65a7',
      'border' => '#2d65a7',
      'text' => '#ffffff',
    ),
  );

  $weight = 0;
  foreach ($terms as $parent_term => $children) {
    _agri_core_api_create_term($voc_machine_name, $parent_term, NULL, $weight);
    $weight++;

    foreach ($children as $key => $child_term) {
      _agri_core_api_create_term($voc_machine_name, $child_term, $parent_term, $key);
    }

    if (array_key_exists($parent_term, $terms_color)) {
      $list_terms_colors = $children;
      $list_terms_colors[] = $parent_term;
      _agri_events_set_term_colors($list_terms_colors, $voc_machine_name, $terms_color[$parent_term]);
    }
  }
}

/**
 * Implements hook_enable().
 */
function agri_events_enable() {
  drupal_set_message(t('Agri Events feature is now active on your site.'));

  // Adding Organic Group fields.
  drupal_static_reset('og_fields_info');
  og_create_field('og_group_ref', 'node', 'event');
  og_create_field('group_content_access', 'node', 'event');

  features_revert(array(
    'agri_events' => array(
      'conditional_fields',
    ),
  ));

}

/**
 * Implements hook_disable().
 */
function agri_events_disable() {
  drupal_set_message(t('Agri Events feature is now inactive on your site.'));
}

/**
 * Revert ds components in agri_events_feature.
 */
function agri_events_update_7003() {
  if (!module_exists('smart_trim')) {
    module_enable(array('smart_trim'));
  }

  features_revert(array(
    'agri_events' => array(
      'ds_field_settings',
      'ds_layout_settings',
      'variable',
    ),
  ));
}

/**
 * Revert components in agri_events_feature.
 */
function agri_events_update_7004() {
  features_revert(array(
    'agri_events' => array(
      'ds_field_settings',
      'ds_layout_settings',
      'variable',
      'field',
    ),
  ));
}

/**
 * EIPAGRI-129 - Grant permissions to new role Event manager.
 */
function agri_events_update_7006() {
  // First we revert the new role.
  features_revert(array('agri_events' => array('user_role')));
  // And then we grant permissions to "Event manager" role.
  // Permissions are already exported by event_core.
  $role = user_role_load_by_name('event manager');
  user_role_grant_permissions($role->rid, array(
    'create event content',
    'edit own event content',
    'delete own event content',
  ));
}

/**
 * EIPAGRI-171 - Remove field_tags, add field_core_keywords.
 */
function agri_events_update_7007() {
  _agri_core_restore_overrides();
  features_revert(array('agri_events' => array('field')));
}

/**
 * EIPAGRI-299: Unpublish static events pages.
 *
 * Set menu parent id (plid) for 'events_list' view's displays.
 */
function agri_events_update_7008() {

  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', array('EIP-AGRI Events', 'European calendar'), 'IN')
    ->execute();

  while ($result = $query->fetchAssoc()) {
    $nids[] = $result['nid'];
  }

  // Loop through nodes.
  foreach ($nids as $nid) {
    // Load the node object.
    $node = node_load($nid);
    // Set status to 0 (unpublished).
    $node->status = 0;
    // Save the node.
    node_save($node);
  }

  // Find plid for 'EIP-AGRI Events' old node menu link.
  $menu_plid_events = db_select('menu_links', 'ml')
    ->fields('ml', array('plid'))
    ->condition('link_title', 'EIP-AGRI Events')
    ->condition('module', 'menu')
    ->execute()
    ->fetchField();
  // Update plid for events_list 'EIP-AGRI Events' view's display menu link.
  db_update('menu_links')
    ->fields(array('plid' => $menu_plid_events))
    ->condition('link_title', 'EIP-AGRI Events')
    ->condition('module', 'system')
    ->execute();

  // Find plid for old 'European calendar' node menu link.
  $menu_plid_calendar = db_select('menu_links', 'ml')
    ->fields('ml', array('plid'))
    ->condition('link_title', 'European calendar')
    ->condition('module', 'menu')
    ->execute()
    ->fetchField();
  // Update plid for events_list 'European calendar' view's display menu link.
  db_update('menu_links')
    ->fields(array('plid' => $menu_plid_calendar))
    ->condition('link_title', 'European calendar')
    ->condition('module', 'system')
    ->execute();

  // Rebuild menu and clear menu cache.
  menu_rebuild();
  menu_cache_clear_all();
}

/**
 * Update parent id of new events menu link.
 */
function agri_events_update_7009() {

  // Select menu parent id for new menu item EIP-AGRI-Events.
  $plid = db_select('menu_links', 'ml')
    ->fields('ml', array('mlid'))
    ->condition('link_path', 'news-events/events')
    ->condition('hidden', 0)
    ->execute()->fetchField();

  // Update plid for EIP-AGRI-Events view's display menu link.
  db_update('menu_links')
    ->fields(array('plid' => $plid))
    ->condition('link_path', 'news-events/events/eipagri-events')
    ->condition('module', 'system')
    ->execute();

  // Rebuild menu and clear menu cache.
  menu_rebuild();
  menu_cache_clear_all();
}

/**
 * Update European Events Views menu links.
 */
function agri_events_update_7201() {

  // Select menu parent id for Events menu items.
  $plid = db_select('menu_links', 'ml')
    ->fields('ml', array('mlid'))
    ->condition('link_path', 'news-events/events')
    ->condition('link_title', 'Events')
    ->execute()->fetchField();

  // Enable dynamic eipagri events list views display.
  db_update('menu_links')
    ->fields(array('hidden' => 0))
    ->condition('link_path', 'news-events/events/eipagri-events')
    ->execute();

  // Update plid for EIP-AGRI-Events view's display menu link.
  db_update('menu_links')
    ->fields(array('plid' => $plid))
    ->condition('link_path', 'news-events/events/eipagri-events')
    ->condition('module', 'system')
    ->execute();

  // Update plid for EIP-AGRI-Events view's display menu link.
  db_update('menu_links')
    ->fields(array('plid' => $plid))
    ->condition('link_path', 'news-events/events/european-calendar')
    ->condition('module', 'system')
    ->execute();

  // Rebuild menu and clear menu cache.
  menu_rebuild();
  menu_cache_clear_all();
}

/**
 * Enable contrib module views_block_filter_block.
 */
function agri_events_update_7203() {
  module_enable(array('views_block_filter_block'));
}

/**
 * Disable EIP-AGRI Events and European calendar menu links.
 */
function agri_events_update_7205() {

  $query = db_select('menu_links', 'ml')
    ->fields('ml', array('mlid'))
    ->condition('link_title', 'EIP-AGRI Events')
    ->condition('menu_name', 'main-menu')
    ->execute();

  $ids = array();

  while ($result = $query->fetchAssoc()) {
    $ids[] = $result['mlid'];
  }

  foreach ($ids as $id) {
    // Disable the old EIP-AGRI Events menu links.
    $item = menu_link_load($id);
    $item['hidden'] = 1;
    menu_link_save($item);
  }

  $mlid_eu = db_select('menu_links', 'ml')
    ->fields('ml', array('mlid'))
    ->condition('link_title', 'European calendar')
    ->condition('menu_name', 'main-menu')
    ->execute()->fetchField();

  // Disable the old European Calendar menu link.
  $item = menu_link_load($mlid_eu);
  $item['hidden'] = 1;
  menu_link_save($item);

  menu_cache_clear_all();

}

/**
 * Alter some terms in taxonomy "Event type".
 */
function agri_events_update_7206() {
  // Enable "calendar" module.
  module_enable(array('calendar'));

  // Edit term name from "European Calendar" to "Other European events".
  $voc_machine_name = 'event_type';
  $term = taxonomy_get_term_by_name('European Calendar', $voc_machine_name);
  $term = reset($term);
  $term->name = 'Other European events';
  taxonomy_term_save($term);

  // Assign Colors to "Other European events" and children.
  $eu_calendar_events_terms = array(
    'Other European events',
    'Conference',
    'Seminar',
    'Subgroup on Innovation meetings',
    'Field day',
    'Workshop',
    'Other',
  );
  $eu_calendar_events_color = array(
    'background' => '#2d65a7',
    'border' => '#2d65a7',
    'text' => '#ffffff',
  );

  _agri_events_set_term_colors($eu_calendar_events_terms, $voc_machine_name, $eu_calendar_events_color, 'update');

  // Assign Colors to "EIP-AGRI Events" and children.
  $eip_agri_events_terms = array(
    'EIP-AGRI Events',
    'EIP-AGRI Focus Group',
    'EIP-AGRI seminar',
    'EIP-AGRI workshop',
  );
  $eip_agri_events_color = array(
    'background' => '#61a984',
    'border' => '#61a984',
    'text' => '#ffffff',
  );

  _agri_events_set_term_colors($eip_agri_events_terms, $voc_machine_name, $eip_agri_events_color, 'update');
}
