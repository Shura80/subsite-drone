<?php

/**
 * @file
 * Code for the AGRI Events feature.
 */

include_once 'agri_events.features.inc';

/**
 * Implements hook_field_default_field_instances_alter().
 */
function agri_events_field_default_field_instances_alter(&$fields) {
  if (isset($fields['node-event-field_event_image']['field_config']['settings']['default_image'])) {
    $fid = $fields['node-event-field_event_image']['field_config']['settings']['default_image'];
    $fields['node-event-field_event_image']['field_config']['settings']['default_image'] = variable_get('agri_core_default_image_fid', $fid);
  }
}

/**
 * Implements hook_override_multisite_components().
 */
function agri_events_override_multisite_components() {
  _agri_events_overrides_permission();
  watchdog('agri_events', 'Override multisite components');
}

/**
 * Implements hook_block_view_alter().
 */
function agri_events_block_view_alter(&$data, $block) {
  if ($block->module == 'quicktabs' && $block->delta == 'agri_event_event_list') {
    // Hide the block title.
    $data['subject'] = '';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function agri_events_views_query_alter(&$view, &$query) {
  if ($view->name == 'events_list' && $view->current_display == 'splash_page') {
    // Add false condition to receive zero results.
    // This display is used only for exposed filters and page structure.
    $query->add_where(0, 1, 0);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function agri_events_views_pre_view(&$view, &$display_id, &$args) {

  // Add the legend of the calendar in the view header.
  $display = ($view->current_display == 'event_month_page') || ($view->current_display == 'event_day_page');
  if ($view->name == 'agri_calendar' && $display) {

    $voc_event_type = taxonomy_vocabulary_machine_name_load('event_type');
    $terms = taxonomy_get_tree($voc_event_type->vid, 0, 1);

    $term_list = array();
    foreach ($terms as $term) {
      $term_list[] = array(
        'data' => $term->name,
        'class' => array(
          'colors-taxonomy-term-' . $term->tid,
          'event-type-label',
        ),
      );
    }

    $attributes = array(
      'class' => array(
        'agri_calendar_legend',
      ),
    );

    $item = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'relationship' => 'none',
      'group_type' => 'group',
      'ui_name' => '',
      'label' => '',
      'empty' => 0,
      'content' => theme('item_list', array(
        'items' => $term_list,
        'attributes' => $attributes,
      )),
      'format' => 'full_html',
      'tokenize' => 0,
    );

    // Render the header.
    $view->set_item($display_id, 'header', 'area', $item);
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function agri_events_views_default_views_alter(&$views) {
  // Disable 'calendar' platform view.
  if (array_key_exists('calendar', $views)) {
    $view = $views['calendar'];
    $view->disabled = TRUE;
  }
}

/**
 * Implements hook_preprocess_calendar_item().
 */
function agri_events_preprocess_calendar_item(&$vars) {
  // Add specific class for colors module.
  $item = $vars['item'];
  $vars['colors'] = 'colors-taxonomy-term-' . $item->row->taxonomy_term_data_node_tid;
}

/**
 * Implements hook_colors_rebuild().
 */
function agri_events_colors_rebuild() {
  return TRUE;
}

/**
 * Implements hook_colors_build_selector().
 */
function agri_events_colors_build_selector($class) {
  // Builds a selector string for integration with Calendar module.
  $selector = array(
    '.' . $class . '.event-type-label',
    '.calendar-calendar .month-view .full td.single-day div.monthview.' . $class,
    '.calendar-calendar .month-view .full td.multi-day div.monthview.' . $class,
    '.calendar-calendar .month-view .full td.single-day div.monthview.' . $class . ' a',
    '.calendar-calendar .month-view .full td.multi-day div.monthview.' . $class . ' a',
    '.calendar-calendar .day-view .full .single-day div.dayview.' . $class,
    '.calendar-calendar .day-view .full .multi-day div.dayview.' . $class,
    '.calendar-calendar .day-view .full .single-day div.dayview.' . $class . ' a',
    '.calendar-calendar .day-view .full .multi-day div.dayview.' . $class . ' a',
  );

  return implode(',', $selector);
}

/**
 * Helper function to assign colors to taxonomy terms using Colors module.
 *
 * @param array $terms
 *   An array of taxonomy terms on which add colors.
 * @param string $voc_machine_name
 *   The vocabulary machine name that contains the terms to modify.
 * @param array $colorset
 *   The color parameters (background, border, text) to add to taxonomy terms.
 * @param string $op
 *   The type of operation to perform (insert or update).
 */
function _agri_events_set_term_colors(array $terms, $voc_machine_name, array $colorset, $op = 'insert') {

  // Assign default colors to terms in Colors module's table.
  foreach ($terms as $term) {
    $term_array = taxonomy_get_term_by_name($term, $voc_machine_name);
    $term = reset($term_array);
    $term_array_tid = $term->tid;

    if ($op == 'insert') {
      db_insert('colors')
        ->fields(array(
          'selector' => 'colors_taxonomy_term_' . $term_array_tid,
          'color' => serialize($colorset),
          'module' => 'taxonomy_term',
        ))
        ->execute();
    }
    elseif ($op == 'update') {
      db_update('colors')
        ->fields(array(
          'color' => serialize($colorset),
          'module' => 'taxonomy_term',
        ))
        ->condition('selector', 'colors_taxonomy_term_' . $term_array_tid)
        ->execute();
    }
  }
}

/**
 * Helper function to get term colors.
 *
 * @param string $term
 *   The term name to filter.
 * @param string $voc_machine_name
 *   The vocabulary machine name to filter.
 * @param string $module
 *   The module to filter.
 *
 * @return mixed
 *   The HEX value to return.
 */
function _agri_events_get_term_colors($term, $voc_machine_name, $module) {

  $term_data = taxonomy_get_term_by_name($term, $voc_machine_name);
  $term = reset($term_data);

  $tid = $term->tid;

  // Use the colors module APIs to get colors for a certain module.
  $colors = colors_get_module_colors($module);

  return $colors["colors_taxonomy_term_$tid"]["background"];

}

/**
 * Restore custom permissions on custom user role.
 */
function _agri_events_overrides_permission() {
  $role = user_role_load_by_name('event manager');
  user_role_grant_permissions($role->rid, [
    'create event content',
    'edit own event content',
    'delete own event content',
  ]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_events_form_event_node_form_alter(&$form, &$form_state, $form_id) {

  $fields = [
    'field_event_type',
    'field_event_type_other',
    'field_event_image',
    'field_event_pictures',
    'field_core_geographical_area',
    'field_core_other_location',
    'field_event_address',
    'field_core_keywords',
    'field_event_related',
    'field_event_attachments',
  ];

  $weight = 50;

  // Move custom fields inside Multisite "Content" vertical tab.
  foreach ($fields as $field_name) {
    $form[$field_name]['#weight'] = $weight++;
    $form['#group_children'][$field_name] = 'group_event_content';
  }

  // Set default timezone.
  date_default_timezone_set(variable_get('date_default_timezone', 'Europe/Luxembourg'));
  $default_datetime = mktime(0, 0, 0);

  $node = $form_state['node'];

  if (!isset($node->nid) || isset($node->is_new)) {
    $form['field_event_date'][LANGUAGE_NONE][0]['#default_value']['value'] = $default_datetime;
  }

  // Conditional field "Other location".
  $other_location = _agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area');
  $settings = array(
    'agri_events' => array(
      'other_location' => $other_location,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_events') . '/js/agri_events.js';

  // Conditional field "Other event type".
  $other_event_type = _agri_core_get_string_tid_from_term_name('Other', 'event_type');

  if (isset($form['field_event_type_other'])) {
    $form['field_event_type_other']['#states'] = [
      'visible' => [
        [
          ':input[name="field_event_type[und]"]' => ['value' => $other_event_type],
        ],
      ],
      'required' => [
        [
          ':input[name="field_event_type[und]"]' => ['value' => $other_event_type],
        ],
      ],
    ];

    // Custom conditional fields validation.
    $form['field_core_other_location']['#element_validate'] = array('_agri_events_other_location_validate');
    $form['field_event_type_other']['#element_validate'] = array('_agri_events_other_event_type_validate');
  }

}

/**
 * Implements hook_ds_pre_render_alter().
 */
function agri_events_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  if ((isset($context['bundle']) && $context['bundle'] == 'event')) {
    if (isset($context['view_mode'])) {

      // View mode full: node detail and event popup.
      if ($context['view_mode'] == 'full') {
        $render_value = &$layout_render_array['header']['#fields'][0];
      }
      // View mode teaser: nodes listing in event view.
      elseif ($context['view_mode'] == 'teaser') {
        $render_value = &$layout_render_array['right'][4];
      }

      if ($render_value) {
        $render_value_start = $render_value['#items'][0]['value'];
        $render_value_end = $render_value['#items'][0]['value2'];
        $date_value_start = format_date($render_value_start, 'custom', 'd/m/Y H:i', $render_value['#items'][0]['timezone']);
        $date_value_end = format_date($render_value_end, 'custom', 'd/m/Y H:i', $render_value['#items'][0]['timezone']);

        // Strip times.
        if (strstr($date_value_start, "00:00") || strstr($date_value_end, "23:59")) {
          $rendered_date = $render_value[0]['#markup'];
          $rendered_date = str_replace(array(' - 23:59', ' - 00:00'), '', $rendered_date);
          $render_value[0]['#markup'] = $rendered_date;
        }

      }
    }
  }
}

/**
 * Custom field_event_type_other validation.
 *
 * @param mixed $element
 *   The field array.
 * @param mixed $form_state
 *   The form_state array.
 * @param mixed $form
 *   The form array.
 */
function _agri_events_other_event_type_validate($element, &$form_state, $form) {

  $event_other = $form_state['values']['field_event_type'][LANGUAGE_NONE][0]['tid'];

  if ($event_other == _agri_core_get_string_tid_from_term_name('Other', 'event_type')
  && empty($element[LANGUAGE_NONE][0]['value']['#value'])) {
    $element['#required'] = TRUE;
    form_error($element, t('@label field is required.',
      array('@label' => $element[LANGUAGE_NONE]['#title']))
    );
  }
}

/**
 * Custom field_core_other_location validation.
 *
 * @param mixed $element
 *   The field array.
 * @param mixed $form_state
 *   The form_state array.
 * @param mixed $form
 *   The form array.
 */
function _agri_events_other_location_validate($element, &$form_state, $form) {

  $other_location = array_column($form_state['values']['field_core_geographical_area'][LANGUAGE_NONE], 'tid');

  if (in_array(_agri_core_get_string_tid_from_term_name('Other', 'core_geographical_area'), $other_location)
    && empty($element[LANGUAGE_NONE][0]['value']['#value'])) {
    $element['#required'] = TRUE;
    form_error($element, t('@label field is required.',
        array('@label' => $element[LANGUAGE_NONE]['#title']))
    );
  }
}
