<?php

/**
 * @file
 * Contains \EnrdNotificationsSubContext.
 */

use Drupal\DrupalDriverManager;
use Drupal\DrupalExtension\Context\DrupalSubContextInterface;
use Drupal\DrupalExtension\Context\RawDrupalContext;
use Behat\Behat\Hook\Scope\BeforeScenarioScope;

/**
 * Behat test subcontext for the ENRD environment.
 */
class EnrdNotificationsSubContext extends RawDrupalContext implements DrupalSubContextInterface {

  /**
   * {@inheritdoc}
   */
  protected $drupal;

  /**
   * Constructs an EnrdNotificationsSubContext object.
   *
   * @param \Drupal\DrupalDriverManager $drupal
   *   The Drupal driver manager.
   */
  public function __construct(DrupalDriverManager $drupal) {
    $this->drupal = $drupal;
  }

  /**
   * Set wider resolution before scenarios.
   *
   * @BeforeScenario @javascript
   */
  public function beforeScenario(BeforeScenarioScope $scope) {
    $this->getSession()->getDriver()->maximizeWindow();
  }

  /**
   * Delete scheduled digests generated by ENRD Notifications.
   *
   * @AfterScenario @notifications-subscription
   */
  public function deleteMessageDigests() {

    // Clean message_digest table.
    db_delete('message_digest')
      ->condition('notifier', ['digest_day', 'digest_week', 'digest_month'], 'IN')
      ->execute();

    // Clean message_digest last run cron variables.
    db_update('variable')
      ->fields([
        'value' => serialize(0),
      ])
      ->condition('name', 'message_digest_%', 'LIKE')
      ->execute();
  }

  /**
   * Search for message subscribe items in queue table.
   *
   * @Then I should find a message subscribe item in the queue list
   */
  public function getMessageInQueue() {
    // Search in queue table for message_subscribe item.
    $query = db_select('queue', 'q');
    $query->fields('q', ['item_id']);
    $query->condition('q.name', 'message_subscribe');
    $ids = $query->execute()->fetchCol();

    if (empty($ids)) {
      throw new \Exception('Message subscribe queue item not found.');
    }
  }

  /**
   * Search for message subscribe items in message_digest table.
   *
   * @param string $interval
   *   A valid message_digest module interval machine name.
   * @param string $op
   *   A valid message_digest sent status.
   *
   * @Then /^the "([^"]*)" message digest item has been "([^"]*)"$/
   *
   * @throws \Exception.
   */
  public function getItemInMessageDigest($interval, $op) {

    $status = '';
    $digest_type = '';

    // Get the digest type from arg1.
    if ($interval == 'daily') {
      $digest_type = 'digest_day';
    }
    elseif ($interval == 'weekly') {
      $digest_type = 'digest_week';
    }
    elseif ($interval == 'monthly') {
      $digest_type = 'digest_month';
    }
    // Get the operation from arg2.
    if ($op == 'created') {
      $status = 0;
    }
    elseif ($op == 'sent') {
      $status = 1;
    }

    // Search in message_digest table for item.
    $query = db_select('message_digest', 'md');
    $query->fields('md', ['mid']);
    $query->condition('md.notifier', $digest_type);
    $query->condition('md.sent', $status);
    $sent = $query->countQuery()->execute()->fetchField();

    if (empty($sent)) {
      throw new \Exception("Message digest item not $op");
    }
  }

  /**
   * Visit user's profile notifications tab.
   *
   * @Then I open my notifications page
   */
  public function iOpenMyNotificationsPage() {

    // Get the currently logged in user.
    if (!($user = $this->getUserManager()->getCurrentUser())) {
      throw new \Exception('Anonymous users cannot subscribe for notifications.');
    }

    // Set internal browser on the user's notifications profile tab.
    $this->getSession()->visit($this->locatePath('/user/' . $user->uid . '/notifications'));
  }

}
