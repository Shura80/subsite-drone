<?php

/**
 * @file
 * Code for the AGRI Core feature.
 */

include_once 'agri_core.features.inc';
include_once 'agri_core.api.inc';

define('AGRI_CORE_ENRD_PATH', 'https://enrd.ec.europa.eu/');
define('AGRI_CORE_ASK_VALERIE_PATH', 'https://www.ask-valerie.eu/#/link?search=');
define('AGRI_CORE_EU_LOGIN_MESSAGE', "<p>Are you already a registered user? Please note that as of xx/yy/zzzz  <b>EU Login</b> (formerly: ECAS) will be your single access point to the user area of the EIP-AGRI website.</p>
<p><b>If you have already a EU Login account</b> please use that to login to the EIP AGRI website from now on.</p>
<p>If you already a registered user but <b>still don't have a EU login account</b>, create now a new user EU Login account (see this tutorial to know how to do it).</p>
<p>In this case we recommend you to use the same email address you used when registering to the EIP-AGRI website for the first time. In this way all your personal information won't be lost!</p>
<p>For further assistance please contact: email address</p>");
define('AGRI_CORE_SPELL_CHECKER_HELP_MESSAGE', "<p>You can do a spell check by enabling the correspondent function in your browser and thus using the desired dictionaries.</p><p>The words considered wrong will be underlined in red.</p></br>
<p>If you move the mouse over these words and click <strong><kbd>Ctrl</kbd> + mouse right-click</strong> the list of corrections proposed by your browser will be shown.</p></br>
<p>To activate the spell check function in your browser please refer to the browser's online help.</p>");
define('AGRI_CORE_BREXIT_DISCLAIMER', 'The content of this website is being updated in the light of the UK\'s departure from the EU. If the site contains content that does not yet reflect this development, it is unintentional and will be addressed.');
define('AGRI_CORE_WEBTOOLS_SMARTLOADER_PRURL', '//europa.eu/webtools/load.js');
define('AGRI_CORE_TWITTER_FEEDS_JSON', <<<JSON
{
	"service": "smk",
	"type": "search",
	"display_user": true,
	"display_user_pic": true,
	"auto_expand_photo": false,
	"auto_expand_video": false,
	"count": "3",
	"incl_profiles": "*",
	"query": "from:@EIPAGRI_SP OR @EIPAGRI_SP",
	"result_type": "recent",
	"rts_display_original": false,
	"tweet_about_btn": false,
	"tweet_more_btn": false,
  "events": {
    "onready": "agriThemeTwitterFeedsBlock"
  }
}
JSON
);

/**
 * Implements hook_default_context_load_alter().
 */
function agri_core_context_load_alter(&$context) {
  switch ($context->name) {
    case 'news-search':
      foreach ($context->reactions['block']['blocks'] as $name => $value) {
        $context->reactions['block']['blocks'][$name]['weight'] = 0;
      }
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function agri_core_block_info() {
  $blocks['footer_ec_logo'] = array('info' => t('Footer EC logo'));
  $blocks['footer_contacts'] = array('info' => t('Footer contacts'));
  $blocks['user_register_desc'] = array('info' => t('User registration form description'));
  $blocks['agri_user_login'] = array('info' => t('Block user login for EIP-AGRI'));
  $blocks['agri_core_eu_login'] = array('info' => t('AGRI Core - EU Login'));
  $blocks['agri_core_twitter_feeds'] = array('info' => t('AGRI Core - Twitter feeds'));
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function agri_core_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'agri_core_eu_login':
      $form['agri_core_eu_login_message'] = array(
        '#type' => 'text_format',
        '#title' => t('Message'),
        '#format' => 'full_html',
        '#default_value' => variable_get('agri_core_eu_login_message', AGRI_CORE_EU_LOGIN_MESSAGE),
      );
      break;

    case 'agri_core_twitter_feeds':
      $form['agri_core_twitter_feeds_json_object'] = array(
        '#type' => 'textarea',
        '#title' => t('JSON object'),
        '#default_value' => variable_get('agri_core_twitter_feeds_json_object', AGRI_CORE_TWITTER_FEEDS_JSON),
        '#element_validate' => array('agri_core_block_twitter_feeds_json_validate'),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function agri_core_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'agri_core_eu_login':
      $allow_tags = '<p><div><a><b><h1><h2><h3><h4><ul><ol><li>';
      variable_set('agri_core_eu_login_message', strip_tags($edit['agri_core_eu_login_message']['value'], $allow_tags));
      break;

    case 'agri_core_twitter_feeds':
      variable_set('agri_core_twitter_feeds_json_object', $edit['agri_core_twitter_feeds_json_object']);
      break;
  }
}

/**
 * Validation for the "agri_core_twitter_feeds_json_object" form element.
 *
 * @param array $element
 *   The form element.
 * @param array $form_state
 *   The form state.
 * @param array $form
 *   The entire form.
 */
function agri_core_block_twitter_feeds_json_validate($element, &$form_state, $form) {
  $json = drupal_json_decode($element['#value']);
  if ($json === NULL || $json === FALSE) {
    form_error($element, t('Invalid JSON format'));
  }
}

/**
 * Implements hook_block_view().
 */
function agri_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'footer_ec_logo':
      $title = t('European Commision logo');
      $variables = array(
        'path' => path_to_theme() . '/images/logo-ce-horizontal-en-quadri-lr.png',
        'alt' => $title,
        'title' => $title,
        'attributes' => array(
          'class' => array('footerECLogo'),
        ),
      );

      $text = array(
        '#markup' => t('Funded by'),
        '#prefix' => '<p class="footerFundedBy">',
        '#suffix' => '</p>',
      );

      $block['subject'] = NULL;
      $block['content'] = drupal_render($text) . theme('image', $variables);
      break;

    case 'footer_contacts':
      $block['subject'] = NULL;
      $block['content']['#markup'] = 'EIP-AGRI SERVICE POINT +32 2 543 73 48' . ' ' . l(t('servicepoint@eip-agri.eu'),
          'mailto:servicepoint@eip-agri.eu');
      break;

    case 'user_register_desc':
      $block['subject'] = NULL;
      $block['content']['#markup'] = t("<h4>Welcome to the EIP-Network.<br />The more accurate the information that you provide in the registration form is, the bigger the network advantages will be for you.<br />Filling in the form will take around 15-20 minutes.</h4>");
      break;

    case 'agri_user_login':
      global $user;
      $block['content'] = theme("agri_user_login", array('user' => $user));
      break;

    case 'agri_core_eu_login':
      $output = '<h3>Register/Login with EU Login</h3>';
      $output .= filter_xss_admin(variable_get('agri_core_eu_login_message', AGRI_CORE_EU_LOGIN_MESSAGE));
      $output .= '</br><h3>Login with EIP-AGRI account</h3>';
      $block['content'] = $output;
      break;

    case 'agri_core_twitter_feeds':
      $smartloader_prurl = variable_get('agri_core_webtools_smartloader_prurl', AGRI_CORE_WEBTOOLS_SMARTLOADER_PRURL);
      if (!empty($smartloader_prurl)) {
        $json = variable_get('agri_core_twitter_feeds_json_object', AGRI_CORE_TWITTER_FEEDS_JSON);
        $content = array(
          '#markup' => '<script type="application/json">' . $json . '</script>',
          '#attached' => array(
            'js' => array(
              array(
                'data' => $smartloader_prurl,
                'type' => 'external',
                'defer' => 'defer',
              ),
            ),
          ),
        );
      }
      else {
        $block['content'] = t('No content available.');
      }
      $block['subject'] = t('Join the conversation @EIPAGRI_SP #EIPagri');
      $block['content'] = $content;

      break;
  }
  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function agri_core_block_view_alter(&$data, $block) {
  switch ($block->delta) {
    case 'agri_stakeholders-block_1':
      $data['subject'] = ' ';
  }
}

/**
 * Implements hook_menu().
 */
function agri_core_menu() {

  $menu_items = array(
    'find-connect' => array(
      'title' => 'Find',
      'weight' => -46,
    ),
    'news-events' => array(
      'title' => 'News',
      'weight' => -44,
    ),
  );

  foreach ($menu_items as $path => $options) {
    $items[$path] = array(
      'title' => $options['title'],
      'page callback' => 'agri_core_callback_empty_page',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
      'menu_name' => 'main-menu',
      'expanded' => 1,
      'weight' => $options['weight'],
    );
  }

  $items['group/autocomplete'] = array(
    'page callback' => 'agri_core_autocomplete',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  $items['comment/%comment/delete-own'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_core_confirm_delete', 1),
    'access callback' => 'agri_core_delete_comment_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/related'] = array(
    'page callback' => 'agri_core_more_solr_related_content',
    'page arguments' => array(1),
    'file' => 'includes/agri_core.apachesolr_search_related_more.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/user-interface/brexit-disclaimer'] = array(
    'title' => 'Brexit Disclaimer',
    'description' => 'Set Brexit Disclaimer to be shown in specific areas of the website.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_core_brexit_disclaimer_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => 1,
    'file' => 'includes/agri_core.admin.inc',
  );

  // EC Webtools administration page.
  $items['admin/config/services/agri-webtools'] = array(
    'title' => 'Agri webtools settings',
    'description' => 'Configuration of the EC Webtools path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('agri_core_webtools_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/agri_core.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_custom_theme().
 */
function agri_core_custom_theme() {
  if (
    (arg(0) == 'user' && arg(2) == 'edit') ||
    (arg(0) == 'admin' && arg(2) == 'menu') ||
    (arg(2) == 'taxonomy') ||
    (arg(0) == 'taxonomy' && arg(3) == 'edit')
  ) {
    return variable_get('theme_default', 'ec_resp');
  }
}

/**
 * Implements hook_libraries_info().
 */
function agri_core_libraries_info() {
  $libraries = array();
  $libraries['bootstrap-hover-dropdown'] = array(
    'name' => 'Bootstrap hove dropdown',
    'vendor url' => 'https://cameronspear.com/blog/bootstrap-dropdown-on-hover-plugin/',
    'download url' => 'https://github.com/CWSpear/bootstrap-hover-dropdown/releases/tag/v2.2.1',
    'version arguments' => array(
      'file' => 'bootstrap-hover-dropdown.min.js',
      'pattern' => '/Version: v(\d).(\d+)(.\d+)?/i',
      'lines' => 10,
    ),
    'files' => array(
      'js' => array(
        'bootstrap-hover-dropdown.min.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_module_implements_alter().
 */
function agri_core_module_implements_alter(&$module_list, $context) {

  // Make sure agri_core's hook implementations
  // are called after all other modules.
  if ($context === "custom_theme") {
    $temp = $module_list['agri_core'];
    unset($module_list['agri_core']);
    $module_list['agri_core'] = $temp;
  }
  if ($context === "form_alter") {
    $temp = $module_list['agri_core'];
    unset($module_list['agri_core']);
    $module_list['agri_core'] = $temp;
  }
  if ($context === "menu_link_alter") {
    $temp = $module_list['agri_core'];
    unset($module_list['agri_core']);
    $module_list['agri_core'] = $temp;
  }
  if ($context === "menu_alter") {
    $temp = $module_list['agri_core'];
    unset($module_list['agri_core']);
    $module_list['agri_core'] = $temp;
  }
  if ($context == 'url_outbound_alter') {
    $temp = $module_list['agri_core'];
    unset($module_list['agri_core']);
    $module_list['agri_core'] = $temp;
  }
  if ($context == 'taxonomy_term_delete') {
    unset($module_list['multisite_drupal_toolbox']);
  }
  if ($context == 'node_access_records') {
    unset($module_list['multisite_drupal_access']);
  }
}

/**
 * Implements hook_boot().
 */
function agri_core_boot() {
  global $conf;

  // Set site default front page to '/node', allowing
  // page callback below to produce a clean, empty page.
  $conf['site_frontpage'] = 'node';

  // Make sure nodes are edited using default theme.
  $conf['node_admin_theme'] = FALSE;
}

/**
 * Implements hook_permission().
 */
function agri_core_permission() {
  return array(
    'administer agri taxonomies' => array(
      'title' => t('Administer agri taxonomies'),
      'description' => t('Perform administration tasks for agri vocabularies.'),
    ),
    'delete own comments' => array(
      'title' => t('Delete own comments'),
      'description' => t('Allows a user to delete own comments.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function agri_core_menu_alter(&$items) {
  $items['node/add']['menu_name'] = 'menu-core-action-menu';
  $items['node']['page callback'] = 'agri_core_callback_empty_page';
  $items['node/add/article']['access callback'] = '_agri_core_revoke_access';
  $items['node/add/community']['access callback'] = '_agri_core_revoke_access';

  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name'] += array(
    'access callback' => '_agri_core_vocabulary_permission',
    'access arguments' => array('access content taxonomy', 3),
  );

  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add'] += array(
    'access callback' => '_agri_core_vocabulary_permission',
    'access arguments' => array('administer taxonomy', 3),
  );

  $items['admin/structure/taxonomy']['access callback'] = '_agri_core_vocabulary_permission';

  // Clone "People" menu item in main menu.
  if (isset($items['find-people'])) {
    $items['find-connect/people'] = $items['find-people'];
    $items['find-connect/people']['menu_name'] = 'main-menu';
  }
  $items['find-people/advisors']['access callback'] = 'agri_core_access_callback_user_is_adviser';

  $items['node/add/forum/%'] = $items['node/add/forum'];

  // EIPAGRI-291: Change the text of the button "My account" with "My EIP-AGRI".
  $items['user']['title callback'] = '_agri_core_user_menu_title';
  $items['user/login']['access callback'] = 'user_is_anonymous';
  $items['user/login']['weight'] = -100;
  $items['user/logout']['access callback'] = 'user_is_logged_in';

  // EIPAGRI-522: Disable tab "Request new password" in /user.
  $items['user/password']['type'] = MENU_CALLBACK;

  // Forums: add collaborative area menu items.
  $defaults = array(
    'access callback' => 'agri_core_menu_forum_access_callback',
    'access arguments' => array(1),
    'file' => 'forum.pages.inc',
    'file path' => drupal_get_path('module', 'forum'),
  );

  $items['node/%node/forum'] = array(
    'title' => 'Forums',
    'page callback' => 'forum_page',
    'type' => MENU_CALLBACK,
  ) + $defaults;

  $items['node/%node/forum/%forum_forum'] = array(
    'title' => 'View',
    'page callback' => 'forum_page',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
  ) + $defaults;

  $items['node/%node/forum/%forum_forum/edit'] = array(
    'title' => t('Edit or delete forum'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_term', 3, NULL),
    'access callback' => 'taxonomy_term_edit_access',
    'access arguments' => array(3),
    'file path' => drupal_get_path('module', 'taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['poll']['page callback'] = 'agri_core_poll_page';

  $items['node/%node/view']['title callback'] = '_agri_core_collaborative_area_view_tab_title';
  $items['my_subscriptions']['access callback'] = FALSE;

  return $items;
}

/**
 * Implements hook_menu_link_alter().
 */
function agri_core_menu_link_alter(&$item) {

  $link_path = $item['link_path'];

  // Set parent menu item for items under "find-connect/" section.
  if (strstr($link_path, 'find-connect/') !== FALSE) {
    if (!isset($item['customized'])) {

      // Get the parent id for "Find" menu items.
      $plid = db_select('menu_links', 'ml')
        ->fields('ml', ['mlid'])
        ->condition('link_title', 'Find')
        ->condition('menu_name', 'main-menu')
        ->execute()->fetchColumn();

      $item['plid'] = $plid;

      // Specific settings for "People" main menu item.
      if ($link_path == 'find-connect/people') {
        // Options to be serialized to set menu link as persistent menu item.
        $options = [
          'alter' => 1,
          'persistent_menu_item' => 1,
          'attributes' =>
            [
              'data-image' => 'lock',
              'data-display-title' => '1',
              'data-hide-children' => 0,
              'data-remove-class' => 0,
            ],
        ];

        $item['options'] = $options;
        $item['weight'] = -43;
        $item['link_title'] = 'People';
      }
    }
  }

  if ($link_path == 'user' && $item['menu_name'] == 'user-menu') {
    $item['options'] = [];
  }
  if ($link_path == 'user/logout') {
    $item['options'] = [];
    $item['menu_name'] = 'menu-core-action-menu';
    $item['weight'] = 10;
  }
}

/**
 * Implements hook_pathauto().
 */
function agri_core_pathauto($op) {
  if ($op == 'settings') {

    // Custom implantation of node under OG.
    $settings = array();
    $settings['module'] = 'og_node'; /* NB: og_node is not a entity type. */
    $settings['token_type'] = 'node';
    $settings['groupheader'] = t('OG Content paths');
    $settings['patterndescr'] = t('Default path pattern (applies to all content types with blank patterns below)');
    $settings['patterndefault'] = '';

    $content = og_get_all_group_content_bundle();
    foreach ($content['node'] as $node_type => $node_name) {
      $settings['patternitems'][$node_type] = t('Pattern for all @node_type paths', array('@node_type' => $node_name));
    }
    return (object) $settings;
  }
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function agri_core_pathauto_pattern_alter(&$pattern, array $context) {
  // Alter standard node aliases.
  if ($context['module'] == 'node') {
    if ($context['data']['node']) {
      // If content is under Organic Group.
      if (!empty($context['data']['node']->{OG_AUDIENCE_FIELD})) {
        // Set a new pattern if configured;
        // NB: og_node is not a entity type.
        $og_pattern = pathauto_pattern_load_by_entity('og_node', $context['type']);
        if (!empty($og_pattern)) {
          $pattern = $og_pattern;
        }
      }
    }
  }
}

/**
 * Implements menu access callback.
 *
 * @see agri_core_menu_alter()
 */
function agri_core_access_callback_user_is_adviser() {
  global $user;

  $terms = taxonomy_get_term_by_name('Adviser', 'core_user_type');
  $term = reset($terms);
  if ($term && $user->uid) {
    $account = user_load($user->uid);
    $account_wrapper = entity_metadata_wrapper('user', $account);
    if (isset($account->field_user_type) && !empty($account->field_user_type)) {
      $user_types = $account_wrapper->field_user_type->value(array('identifier' => TRUE));
      return in_array($term->tid, $user_types);
    }
  }
  return FALSE;
}

/**
 * Implements page callback.
 *
 * @see agri_core_menu_alter()
 */
function agri_core_callback_empty_page() {
  /* Commented due to the code sniffer review. Left here until we fix it differently */
  // drupal_set_title();
  return array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_search_block_form_alter(&$form, &$form_state, $form_id) {
  $form['search_block_form']['#attributes']['placeholder'][] = t('Search EIP-AGRI  website');
  $form['search_block_form']['#size'] = 20;

  unset($form['actions']['submit']['#src']);
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('');
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function agri_core_block_view_search_form_alter(&$data, $block) {
  $data['content']['search_block_form']['#attributes']['placeholder'] = t('Search EIP-AGRI  website');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding a captcha to the user_register form.
 */
function agri_core_form_user_register_form_alter(&$form, &$form_state) {

  // Get countries phone codes.
  $country_phone_codes = _agri_core_get_countries_phone_codes();

  // Pass country codes to javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_core') . '/js/agri_core.js';

  $settings = array(
    'agri_core' => array(
      'country_phone_codes' => $country_phone_codes,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');

  // Hide field collection fields in user register form.
  unset($form['field_organization_collection'][LANGUAGE_NONE][0]['#fieldgroups']['group_additional_information']);
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_core_additional_info']['#access'] = FALSE;
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_organization_contact']['#access'] = FALSE;
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_projects_website']['#access'] = FALSE;

  $form['locale']['#access'] = TRUE;
  $form['locale']['language']['#description'] = t('Specify the language in which you want the website infrastructure to be displayed to you.');
  $form['nuts_region']['#access'] = FALSE;

  // Specify other location custom validate.
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_core_other_location']['#element_validate'] = array('_agri_core_other_location_validate');

  $description = &$form['field_user_accept_terms'][LANGUAGE_NONE]['#description'];
  $description = str_replace('!url', url('terms-and-conditions', array('absolute' => TRUE)), $description);

  // EIPAGRI-218: Link to propose new keywords.
  $form['field_core_keywords'][LANGUAGE_NONE]['#description'] .= l(
    t('Propose new keywords for the list'),
    "content/propose-new-keywords", array(
      'attributes' => array('target' => '_blank'),
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * EIPAGRI-148: Hide contact settings in user profile.
 */
function agri_core_form_user_profile_form_alter(&$form, &$form_state) {

  // Get countries phone codes.
  $country_phone_codes = _agri_core_get_countries_phone_codes();

  // Pass country codes to javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'agri_core') . '/js/agri_core.js';

  $settings = array(
    'agri_core' => array(
      'country_phone_codes' => $country_phone_codes,
    ),
  );

  $form['#attached']['js'][] = array('data' => $settings, 'type' => 'setting');

  if (!user_access('administer users')) {
    $form['contact']['#access'] = FALSE;
  }

  // Hide field collection fields in user form.
  unset($form['field_organization_collection'][LANGUAGE_NONE][0]['#fieldgroups']['group_additional_information']);
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_core_additional_info']['#access'] = FALSE;
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_organization_contact']['#access'] = FALSE;
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_projects_website']['#access'] = FALSE;

  $form['field_core_geographical_area']['#access'] = FALSE;
  $form['field_core_other_location']['#access'] = FALSE;
  $form['field_user_city']['#access'] = FALSE;
  $form['field_user_address']['#access'] = FALSE;
  $form['field_user_phone']['#access'] = FALSE;
  $form['field_user_website']['#access'] = FALSE;
  $form['field_user_birthdate']['#access'] = FALSE;
  // EIPAGRI-522.
  $form['field_user_merged']['#access'] = FALSE;
  $form['nuts_region']['#access'] = FALSE;
  $form['locale']['#access'] = TRUE;
  $form['locale']['language']['#description'] = t('Specify the language in which you want the website infrastructure to be displayed to you.');

  // Specify other location custom validate.
  $form['field_organization_collection'][LANGUAGE_NONE][0]['field_core_other_location']['#element_validate'] = array('_agri_core_other_location_validate');

  // EIPAGRI-218: Link to propose new keywords.
  $form['field_core_keywords'][LANGUAGE_NONE]['#description'] .= l(
    t('Propose new keywords for the list'),
    "content/propose-new-keywords", array(
      'attributes' => array('target' => '_blank'),
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * EIPAGRI-493: Integration with Valerie database.
 */
function agri_core_form_apachesolr_search_custom_page_search_form_alter(&$form, &$form_state, $form_id) {

  if (variable_get('agri_core_show_link_valerie', FALSE)) {
    $link_ask_valerie = variable_get('', AGRI_CORE_ASK_VALERIE_PATH);
    $search_keys = rawurlencode(utf8_encode($form['basic']['keys']['#default_value']));

    $form['ask_valerie'] = array(
      '#markup' => l(
        t('Also search on ask-Valerie.eu') . ' <span class="glyphicon glyphicon-new-window"></span>',
        $link_ask_valerie . $search_keys . '&ui=en_EN',
        array(
          'attributes' => array(
            'title' => t('More info on www.valerie.eu'),
            'target' => '_blank',
            'rel' => 'nofollow',
          ),
          'external' => TRUE,
          'html' => TRUE,
        )
      ),
    );
  }
}

/**
 * Implements hook_views_pre_view().
 */
function agri_core_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name === 'og_members_admin') {
    unset($view->display[$view->current_display]->display_options['filters']['uid']);

    $view->add_item($view->current_display, 'filter', 'realname', 'realname', array(
      'id' => 'realname',
      'field' => 'realname',
      'relationship' => 'NONE',
      'exposed' => TRUE,
      'operator' => '=',
      'is_grouped' => FALSE,
      'identifier' => 'realname',
      'label' => 'Name',
      'expose' => array(
        'operator_id' => 'realname_op',
        'label' => 'name',
        'operator' => 'realname_op',
        'multiple' => FALSE,
        'identifier' => 'realname',
        'remember_roles' => array(
          '2' => '2',
          '1' => 0,
          '3' => 0,
          '4' => 0,
          '5' => 0,
          '7' => 0,
          '8' => 0,
          '6' => 0,
        ),
      ),
    ));

    $view_filters = $view->display_handler->get_option('filters');
    unset($view_filters['uid']);
    $view->display_handler->override_option('filters', $view_filters);
  }
}

/**
 * Implements hook_views_default_views_alter().
 */
function agri_core_views_default_views_alter(&$views) {
  // Disable 'communities_directory' platform view.
  if (array_key_exists('communities_directory', $views)) {
    $view = $views['communities_directory'];
    $view->disabled = TRUE;
  }
  // Disable 'communities_directory_my' platform view.
  if (array_key_exists('communities_directory_my', $views)) {
    $view = $views['communities_directory_my'];
    $view->disabled = TRUE;
  }
}

/**
 * Menu callback: retrieve a JSON object containing autocomplete suggestions.
 */
function agri_core_autocomplete($string = '') {
  $matches = array();

  if ($string) {
    $query = db_select('users', 'u');
    $query->leftJoin('realname', 'rn', 'u.uid = rn.uid');
    $query->fields('u', array('uid'));
    $name_like = db_or();
    $name_like->condition('rn.realname', '%' . db_like($string) . '%', 'LIKE');
    $name_like->condition('u.name', '%' . db_like($string) . '%', 'LIKE');
    $query->condition($name_like);
    $query->range(0, 10);
    $uids = $query->execute()->fetchCol();
    $accounts = user_load_multiple($uids);

    foreach ($accounts as $account) {
      $matches[$account->name] = format_username($account);
      if ($matches[$account->name] != $account->name) {
        $matches[$account->name] .= ' (' . check_plain($account->name) . ')';
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_form_alter().
 */
function agri_core_form_alter(&$form, &$form_state, $form_id) {

  if (strstr($form_id, 'node_form') !== FALSE) {

    // Add this alter in core because agri_core alters runs after all others.
    $projects_array_forms = array(
      'needs_for_research_from_practice_node_form',
      'project_node_form',
      'project_ideas_node_form',
    );

    if (in_array($form_id, $projects_array_forms)) {
      $form['language']['#access'] = FALSE;
    }

    // Fixing hardcoded OG field hiding happening in communities_form_alter().
    if (isset($form['group_content_access'])) {
      $form['group_content_access']['#attributes']['class'] = array();
      $form['group_content_access']['#access'] = TRUE;
    }
    // Check that form alter acts only on node creation/edit.
    if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit'
      || arg(0) == 'node' && arg(1) == 'add'
    ) {
      if (isset($form['field_core_keywords'])) {
        // EIPAGRI-218: Link to propose new keywords.
        $form['field_core_keywords'][LANGUAGE_NONE]['#description'] .= l(
          t('Propose new keywords for the list'),
          "content/propose-new-keywords", array(
            'attributes' => array('target' => '_blank'),
          )
        );
      }
    }

    if (isset($form['og_group_ref'])) {
      $form['og_group_ref']['#attributes']['class'] = array();
      $form['og_group_ref']['#access'] = TRUE;
    }
  }

  if ($form['#id'] == 'views-exposed-form-og-members-admin-default') {
    $form['realname']['#autocomplete_path'] = 'group/autocomplete';
    return $form;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_search_admin_settings_alter(&$form, &$form_state) {
  $form['search_valerie'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search on Valerie'),
  );
  $form['search_valerie']['agri_core_show_link_valerie'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show link in search page',
    '#default_value' => variable_get('agri_core_show_link_valerie', FALSE),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_node_form_alter(&$form, &$form_state) {
  global $user;

  $form['#validate'][] = 'agri_core_group_reference_validate';

  if (in_array('editor', array_values($user->roles))) {
    $form['#after_build'][] = 'agri_core_node_form_after_build';
  }

  // Fixing OG field hiding in communities_form_alter().
  if (isset($form['group_content_access'])) {
    $form['group_content_access']['#attributes']['class'] = array();
  }
  if (isset($form['og_group_ref'])) {
    $form['og_group_ref']['#attributes']['class'] = array();
  }

  if ($form['type']['#value'] == 'collaborative_area') {
    $form['body'][LANGUAGE_NONE][0]['#title'] = 'Description';
  }
}

/**
 * The group field in the content form should be highlighted in red if empty.
 *
 * @param mixed $form
 *   The node form.
 * @param mixed $form_state
 *   The node form state.
 */
function agri_core_group_reference_validate($form, &$form_state) {
  $errors = form_get_errors();
  if (isset($errors['og'])) {
    $entity_type = $form['#entity_type'];
    $bundle = $form['#bundle'];

    foreach (array_keys(og_get_group_audience_fields($entity_type, $bundle)) as $field_name) {
      form_set_error($field_name);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_webform_client_form_alter(&$form, &$form_state) {

  // Add CAPTCHA code to all Webforms.
  if (!(user_access('skip CAPTCHA'))) {
    $form['agri_captcha'] = array(
      '#type' => 'captcha',
      '#captcha_type' => 'image_captcha/Image',
    );
  }

  // Load chosen library on webforms.
  $form['#attached']['library'][] = array('chosen', 'drupal.chosen');

  // Add a maximum length JS indicator with maxlength module.
  if (module_exists('maxlength') && module_exists('webform_validation')) {
    $nid = drupal_substr($form['#form_id'], drupal_strlen('webform_client_form') + 1);
    $node = node_load($nid);
    $values = isset($form_state['values']['submitted']) ? $form_state['values']['submitted'] : NULL;
    _webform_client_form_submit_flatten($node, $values);
    $rules = webform_validation_get_node_rules($nid);

    if ($rules) {
      // Filter out rules that don't belong in the current.
      foreach ($rules as $rule) {
        if ($rule['validator'] == 'max_length') {
          $length_limit = $rule['data'];
          $components = $rule['components'];
          foreach ($components as $component) {
            $form['submitted'][$component['form_key']]['#pre_render'][] = 'maxlength_pre_render';
            $form['submitted'][$component['form_key']]['#maxlength'] = $length_limit;
            $form['submitted'][$component['form_key']]['#maxlength_js'] = TRUE;
          }
        }
      }
    }

  }
}

/**
 * Helper function to hide the menu fieldset from the node form.
 */
function agri_core_node_form_after_build($form, &$form_state) {
  $form['menu']['link']['options']['attributes']['#access'] = user_access('administer users');
  return $form;
}

/**
 * Hide field Accept Terms And Conditions on user profile edit.
 */
function agri_core_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op == 'edit' && $field['field_name'] == 'field_user_accept_terms') {
    // Allow any user to set the value the first time,
    // then pass control to administrators.
    if ($entity->field_user_accept_terms[LANGUAGE_NONE][0]['value'] == 0) {
      return TRUE;
    }
    else {
      return user_access('administer users');
    }
  }
}

/**
 * Implements hook_menu_block_blocks().
 */
function agri_core_menu_block_blocks() {

  $context = og_context();

  if (isset($context) && isset($context['gid'])) {
    $gid = $context['gid'];

    $blocks = array(
      // OG menu block.
      'og-single-menu-block' => array(
        'menu_name' => "menu-og-$gid",
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'OG Menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
      'agri-core-user-menu' => array(
        'menu_name' => 'user-menu',
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'Agri Core - User menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
      'agri-core-action-menu' => array(
        'menu_name' => 'menu-core-action-menu',
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'Agri Core - Action menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
    );
  }
  else {

    $blocks = array(
      // OG load empty menu block when non in OG context.
      'og-single-menu-block' => array(
        'menu_name' => "menu-og",
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'OG Menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
      'agri-core-user-menu' => array(
        'menu_name' => 'user-menu',
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'Agri Core - User menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
      'agri-core-action-menu' => array(
        'menu_name' => 'menu-core-action-menu',
        'parent_mlid' => 0,
        'title_link' => FALSE,
        'admin_title' => 'Agri Core - Action menu',
        'level' => 0,
        'follow' => 0,
        'depth' => 0,
        'expanded' => TRUE,
        'sort' => FALSE,
      ),
    );
  }

  return $blocks;
}

/**
 * Implements hook_workbench_content_alter().
 */
function agri_core_workbench_content_alter(&$output) {

  unset($output['workbench_current_user']);
  $output['workbench_edited']['#attributes'] = $output['workbench_recent_content']['#attributes'];
}

/**
 * This is used instead of features_override with the same goal.
 *
 * We have to override some configurations based on features belonging to the
 * multisite platform, since we cannot do properly updating those features,
 * we had to find a way to override them not using the features_override module.
 */
function _agri_core_restore_overrides() {
  // Unlock body field.
  $field_name = 'body';
  $field = field_read_field($field_name);
  $field['locked'] = 0;
  field_update_field($field);

  // Event instance of body field.
  $instances = field_read_instance('node', 'body', 'event');

  $instances['display']['core_small_teaser'] = array(
    'label' => 'hidden',
    'settings' => array(),
    'type' => 'hidden',
    'weight' => '10',
  );

  $instances['display']['default'] = array(
    'label' => 'hidden',
    'module' => 'text',
    'settings' => array(),
    'type' => 'text_default',
    'weight' => '0',
  );

  $instances['display']['full'] = array(
    'label' => 'hidden',
    'settings' => array(),
    'type' => 'text_default',
    'weight' => 5,
  );

  $instances['display']['teaser'] = array(
    'label' => 'hidden',
    'module' => 'smart_trim',
    'settings' => array(
      'more_link' => '1',
      'more_text' => 'Read more',
      'summary_handler' => 'full',
      'trim_length' => '30',
      'trim_options' => array(
        'text' => 'text',
      ),
      'trim_suffix' => '...',
      'trim_type' => 'words',
    ),
    'type' => 'smart_trim_format',
    'weight' => '2',
  );

  field_update_instance($instances);

  // News instances of body field.
  $instances = field_read_instance('node', 'body', 'news');

  $instances['display']['default'] = array(
    'label' => 'hidden',
    'module' => 'text',
    'settings' => array(),
    'type' => 'text_default',
    'weight' => 2,
  );

  $instances['display']['full'] = array(
    'label' => 'hidden',
    'module' => 'text',
    'settings' => array(),
    'type' => 'text_default',
    'weight' => '0',
  );

  $instances['display']['teaser'] = array(
    'label' => 'hidden',
    'module' => 'smart_trim',
    'settings' => array(
      'more_link' => '1',
      'more_text' => 'Read more',
      'summary_handler' => 'full',
      'trim_length' => '30',
      'trim_options' => array(
        'text' => 'text',
      ),
      'trim_suffix' => '...',
      'trim_type' => 'words',
    ),
    'type' => 'smart_trim_format',
    'weight' => '2',
  );

  $instances['display']['core_spotlight'] = array(
    'label' => 'hidden',
    'module' => 'smart_trim',
    'settings' => array(
      'more_link' => '1',
      'more_text' => 'Read more',
      'summary_handler' => 'full',
      'trim_length' => '30',
      'trim_options' => array(
        'text' => 1,
      ),
      'trim_suffix' => '...',
      'trim_type' => 'words',
    ),
    'type' => 'smart_trim_format',
    'weight' => '2',
  );

  field_update_instance($instances);

  // Lock the body field again so the feature will not be marked as overridden.
  $field['locked'] = 1;
  field_update_field($field);

  // Update tags field.
  $field_name = 'field_tags';
  field_delete_field($field_name);

  // Event date.
  $instances = field_read_instance('node', 'field_event_date', 'event');
  if ($instances) {
    $instances['display']['core_small_teaser'] = array(
      'label' => 'inline',
      'module' => 'date',
      'settings' => array(
        'format_type' => 'eip_agri_medium',
        'fromto' => 'value',
        'multiple_from' => '',
        'multiple_number' => '',
        'multiple_to' => '',
      ),
      'type' => 'date_default',
      'weight' => '2',
    );

    $instances['display']['default']['weight'] = '1';

    $instances['display']['full'] = array(
      'label' => 'inline',
      'settings' => array(),
      'module' => 'date',
      'type' => 'date_default',
      'weight' => '-1',
    );

    $instances['display']['teaser']['label'] = 'inline';

    $instances['display']['teaser'] = array(
      'label' => 'inline',
      'module' => 'date',
      'type' => 'date_default',
      'weight' => '3',
    );

    // Override step increment to support default time 23:59 in end date.
    $instances['widget']['settings']['increment'] = 1;

    unset($instances['display']['default']['settings']['show_repeat_rule']);
    unset($instances['display']['teaser']['settings']);

    field_update_instance($instances);
  }

  // News Date.
  $instances = field_read_instance('node', 'field_news_publication_date', 'news');
  if ($instances) {

    $instances['display']['full'] = array(
      'label' => 'above',
      'settings' => array(),
      'type' => 'date_default',
      'weight' => '0',
    );

    $instances['display']['core_small_teaser'] = array(
      'label' => 'inline',
      'module' => 'date',
      'settings' => array(
        'format_type' => 'short',
        'fromto' => 'both',
        'multiple_number' => '',
        'multiple_from' => '',
        'multiple_to' => '',
        'show_remaining_days' => 0,
      ),
      'type' => 'date_default',
      'weight' => '2',
    );

    $instances['display']['core_spotlight'] = array(
      'label' => 'above',
      'settings' => array(),
      'type' => 'hidden',
      'weight' => '13',
    );

    $instances['display']['default']['weight'] = '5';

    field_update_instance($instances);
  }

  // Set up all the node types with revision and moderation enabled.
  variable_set('node_options_simplenews', array(
    0 => 'moderation',
    1 => 'revision',
  ));

  $ct = array('event', 'news', 'simplenews');
  foreach ($ct as $type) {
    variable_set('language_content_type_' . $type, 1);
  }

  // Set all the vocabularies to localized ( without translation ).
  $tags = taxonomy_vocabulary_machine_name_load('tags');
  if ($tags) {
    $tags->i18n_mode = 1;
    taxonomy_vocabulary_save($tags);
  }

  // This is not working.
  $simplenews = array(
    'orig_type' => 'simplenews',
    'type' => 'simplenews',
    'name' => 'Newsletter item',
    'locked' => FALSE,
  );
  $info = node_type_set_defaults($simplenews);
  node_type_save($info);
  // Doing this way then.
  db_update('node_type')
    ->fields(array('name' => 'Newsletter item'))
    ->condition('type', 'simplenews', '=')
    ->execute();
  node_type_cache_reset();

  // Use same Multisite 1.7 version of jquery update for backend.
  variable_set('jquery_update_jquery_admin_version', '1.7');

  // Override defalut search_active_modules variable.
  variable_set("search_active_modules", array(
    'apachesolr_search' => 'apachesolr_search',
    'node' => 0,
    'user' => 0,
    'advanced_help' => 0,
    'file_entity' => 0,
  ));

  // Enable custom view modes for News nodes.
  $settings = field_bundle_settings('node', 'news');
  $settings['view_modes']['core_spotlight']['custom_settings'] = TRUE;
  $settings['view_modes']['core_small_teaser']['custom_settings'] = TRUE;
  $settings['view_modes']['full']['custom_settings'] = TRUE;
  field_bundle_settings('node', 'news', $settings);

  // Enable custom view modes for Events nodes.
  $settings = field_bundle_settings('node', 'event');
  $settings['view_modes']['full']['custom_settings'] = TRUE;
  $settings['view_modes']['core_small_teaser']['custom_settings'] = TRUE;
  field_bundle_settings('node', 'event', $settings);

  // Enable custom view modes for Press clipping nodes.
  $settings = field_bundle_settings('node', 'press_clipping');
  $settings['view_modes']['core_small_teaser']['custom_settings'] = TRUE;
  field_bundle_settings('node', 'press_clipping', $settings);

  // Enable custom view modes for Press release nodes.
  $settings = field_bundle_settings('node', 'press_release');
  $settings['view_modes']['core_small_teaser']['custom_settings'] = TRUE;
  field_bundle_settings('node', 'press_release', $settings);

}

/**
 * Access callback.
 *
 * @see agri_core_menu_alter()
 */
function _agri_core_revoke_access($op, $node) {
  global $user;
  return $user->uid == 1;
}

/**
 * Helper function to retrieve the agri vocabularies.
 */
function _agri_core_get_vocabularies() {
  $specials = array(
    'event_type',
    'core_geographical_area',
    'publication_type',
    'tags',
    'field_of_activity',
    'newsletter',
    'core_user_type',
    'forums',
    'core_stakeholders',
  );

  foreach ($specials as $name) {
    $voc = taxonomy_vocabulary_machine_name_load($name);
    $vocabularies[$voc->vid] = $voc;
  }

  return $vocabularies;
}

/**
 * Access callback.
 *
 * @see agri_core_menu_alter()
 */
function _agri_core_vocabulary_permission($op, $voc = NULL, $term = NULL) {
  // Caching user permissions.
  $taxonomies = user_access('administer agri taxonomies');
  $admin = user_access('administer taxonomy');

  if (is_null($voc)) {
    if ($taxonomies || $admin) {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    $specials = array(
      'event_type',
      'core_geographical_area',
      'publication_type',
      'tags',
      'field_of_activity',
      'newsletter',
      'core_user_type',
      'core_stakeholders',
    );

    // Is the user going to view an "agri" vocabulary admin page?.
    if (in_array($voc->machine_name, $specials) && $taxonomies) {
      return TRUE;
    }
    // Check the overall taxonomy permission.
    return user_access('administer taxonomy');
  }

}

/**
 * Implements hook_form_form_id_alter().
 */
function agri_core_form_taxonomy_overview_vocabularies_alter(&$form, &$form_state, $form_id) {
  $taxonomies = user_access('administer agri taxonomies');
  $admin = user_access('administer taxonomy');
  if ($taxonomies && !$admin) {
    $vocabularies = _agri_core_get_vocabularies();
    foreach ($vocabularies as $vid => $vocabulary) {
      unset($form[$vid]['edit']);
      $cached_form[$vid] = $form[$vid];
    }
    foreach ($form as $key => $value) {
      if (is_numeric($key)) {
        unset($form[$key]);
      }
    }
    $form = array_merge($form, $cached_form);
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function agri_core_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['delete'])) {
    // Add custom submit when adding term to forums vocabulary.
    if ($form['#term']['vocabulary_machine_name'] == 'forums') {
      $form['#submit'][] = '_agri_core_forums_submit';
    }
  }
}

/**
 * Add redirect to forums vocabulary.
 */
function _agri_core_forums_submit($form, &$form_state) {

  global $base_url;

  // If forum is public redirects to terms list.
  if (empty($form_state['values']['og_group_ref'][LANGUAGE_NONE])) {
    $form_state['redirect'] = 'admin/structure/taxonomy/forums';
  }
  // If forum has at least one group.
  else {
    // Initialize array for collecting nids.
    $nids = array();

    foreach ($form_state['values']['og_group_ref'][LANGUAGE_NONE] as $id => $val) {
      // Collect nids for links.
      $nids[$id] = $val['target_id'];
      // Add other links if forum has been added on more than one group.
      if (count($nids) > 1) {
        // Notify to the user  all nodes where the forum will be added.
        if ($form_state['clicked_button']['#value'] == 'Save') {
          $link = $base_url . "/node/$nids[$id]/forum";
          $node = node_load($nids[$id]);
          drupal_set_message(t('This forum has been added/updated also here <a href="!url">%nodes</a>.',
            array(
              '!url' => $link,
              '%nodes' => $node->title,
            )));
        }
      }
    }
    // Redirect to first related group.
    $form_state['redirect'] = 'node/' . reset($nids) . '/forum';
  }
}

/**
 * Enable all the field dependencies.
 */
function _agri_core_enable_dependencies() {
  $other = taxonomy_get_term_by_name('Other', 'core_geographical_area');
  if (!empty($other)) {
    $term = reset($other);
    $tid = $term->tid;

    // Images is required when field top_news is checked.
    $dependency_options = array(
      'state' => 'required',
      'condition' => 'checked',
      'grouping' => 'AND',
      'effect' => FALSE,
      'effect_options' => array(),
    );

    $dependent_instance = field_info_instance('node', 'field_news_image', 'news');
    $dependee_instance = field_info_instance('node', 'field_top_news', 'news');
    conditional_fields_dependency_insert($dependee_instance['id'],
      $dependent_instance['id'], $dependency_options);

    // Create the field dependency for the field_collection_item.
    _agri_core_field_dependencies(
      array($tid), array(
        'field_core_geographical_area',
        'field_core_other_location',
      ), 'field_collection_item', 'field_organization_collection', 'tid'
    );
  }

  // Field user type is visible when field_project_status has value 1.
  $dependency_options = array(
    'state' => 'visible',
    'condition' => 'value',
    'grouping' => 'AND',
    'effect' => 'show',
    'values_set' => '1',
    'value_form' => '1',
    'value' => array(
      0 => array(
        'value' => 1,
      ),
    ),
    'values' => array(),
  );

  $dependent_instance = field_info_instance('node', 'field_user_type', 'innovative_action');
  $dependee_instance = field_info_instance('node', 'field_projects_status', 'innovative_action');
  conditional_fields_dependency_insert($dependee_instance['id'],
    $dependent_instance['id'], $dependency_options);

  _agri_core_import_user_type_field_dependencies();
}

/**
 * Enable all the user field dependencies.
 */
function _agri_core_import_user_type_field_dependencies() {

  $vocabulary = taxonomy_vocabulary_machine_name_load('core_user_type');
  $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
  $dependant_fields = array();

  foreach ($terms as $tid => $term) {
    $fields = array();

    switch ($term->name) {
      case 'Farmer':
        $fields = array(
          'field_user_spec_type',
          'field_user_spec_size',
        );
        break;

      case 'Land owner':
        $fields = array(
          'field_user_spec_size',
          'field_user_spec_land_type',
        );
        break;

      case 'Forester':
        $fields = array(
          'field_user_spec_forester_type',
          'field_user_spec_forest_type',
          'field_user_spec_forest_utilizati',
          'field_user_spec_size',
        );
        break;

      case 'Industry':
      case 'Retailer':
      case 'Wholesaler':
        $fields = array(
          'field_user_spec_sector',
          'field_user_spec_position',
        );
        break;

      case 'Representative of an NGO':
        $fields = array(
          'field_user_spec_position',
        );
        break;

      case 'Researcher':
        $fields = array(
          'field_user_spec_position',
        );
        break;

      case 'Advisor':
        $fields = array(
          'field_user_spec_advisor_type',
          'field_user_spec_advisor_sector',
          'field_user_spec_position',
          'field_user_spec_rdp',
          'field_user_spec_portfolio',
        );
        break;

      case 'Retailer & Wholesaler':
        $fields = array(
          'field_user_spec_sector',
          'field_user_spec_position',
        );
        break;

      case 'Civil servant':
        $fields = array(
          'field_user_spec_admin_level',
          'field_user_spec_position',
        );
        break;

      case 'Press/media collaborator':
        $fields = array(
          'field_user_spec_media_type',
        );
        break;

      case 'Other':
        $fields = array(
          'field_user_specify_other',
        );
    }

    foreach ($fields as $field) {
      $dependant_fields[$field][] = $tid;
    }
  }

  foreach ($dependant_fields as $field => $ids) {
    _agri_core_field_dependencies($ids, array(
      'field_user_type',
      $field,
    ), 'user', 'user', 'tid', CONDITIONAL_FIELDS_DEPENDENCY_VALUES_OR);
  }
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function agri_core_field_default_field_instances_alter(&$fields) {
  if (isset($fields['user-user-field_user_picture']['field_config']['settings']['default_image'])) {
    $fid = $fields['user-user-field_user_picture']['field_config']['settings']['default_image'];
    $fields['user-user-field_user_picture']['field_config']['settings']['default_image'] = variable_get('profile_default_image_fid', $fid);
  }
}

/**
 * Implements hook_menu_link_insert().
 */
function agri_core_menu_link_insert($link) {
  if ($link['menu_name'] == 'main-menu') {
    $record['expanded'] = 1;
    db_update('menu_links')
      ->fields($record)
      ->condition('mlid', $link['mlid'])
      ->execute();
  }
}

/**
 * Override default permissions for a group member.
 *
 * @see og_role_revoke_permissions()
 */
function _agri_core_set_og_permission() {
  $rid = db_select('og_role', 'og')
    ->fields('og', array('rid'))
    ->condition('og.name', 'member', '=')
    ->condition('og.group_bundle', 'collaborative_area', '=')
    ->execute()
    ->fetchAssoc();

  $types = array('article');
  $permission = '';

  foreach ($types as $nodetype) {
    $permission .= 'create ' . $nodetype . ' content,';
    $permission .= 'update own ' . $nodetype . ' content,';
    $permission .= 'update any ' . $nodetype . ' content,';
    $permission .= 'delete own ' . $nodetype . ' content,';
    $permission .= 'delete any ' . $nodetype . ' content,';
  }
  $permissions = explode(',', drupal_substr($permission, 0, -1));
  $rid = reset($rid);

  og_role_revoke_permissions($rid, $permissions);
}

/**
 * Implements hook_field_widget_info().
 */
function agri_core_field_widget_info() {
  return array(
    'lineage_select' => array(
      'label' => t('Lineage Select'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function agri_core_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'lineage_select') {
    $field['settings']['options_list_callback'] = 'agri_core_allowed_values';
    $instance['widget']['type'] = 'options_select';
    $element = options_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    $element['#attributes']['class'] = array('chosen-select', 'full-width');

    $form['#submit'] = isset($form['#submit']) ? $form['#submit'] : array();
    $form['#submit'][] = 'agri_core_field_widget_form_lineage_select_submit';
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function agri_core_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'lineage_select') {
    $form['save_lineage'] = array(
      '#type' => 'checkbox',
      '#title' => t('Save lineage'),
      '#default_value' => !isset($settings['save_lineage']) ? TRUE : $settings['save_lineage'],
    );
  }

  return $form;
}

/**
 * Returns the set of valid terms for a taxonomy field.
 *
 * @param array $field
 *   The field definition.
 *
 * @return array
 *   The array of valid terms for this field, keyed by term id.
 */
function agri_core_allowed_values(array $field) {
  $options = array();
  foreach ($field['settings']['allowed_values'] as $tree) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
      if ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'])) {
        foreach ($terms as $term) {

          $lineage = array();
          if (!empty($term->parents)) {
            foreach ($term->parents as $tid) {
              foreach ($terms as $_term) {
                if ($_term->tid == $tid) {
                  if (module_exists('i18n_taxonomy')) {
                    $lineage[] = i18n_taxonomy_term_name($_term);
                  }
                  else {
                    $lineage[] = $_term->name;
                  }
                }
              }
            }
          }

          if (module_exists('i18n_taxonomy')) {
            $lineage[] = i18n_taxonomy_term_name($term);
          }
          else {
            $lineage[] = $term->name;
          }
          $options[$term->tid] = implode(' > ', $lineage);
        }
      }
    }
  }
  return $options;
}

/**
 * Implements #submit callback.
 *
 * @see agri_core_field_widget_form()
 */
function agri_core_field_widget_form_lineage_select_submit($form, &$form_state) {

  $bundle = isset($form['#bundle']) ? $form['#bundle'] : NULL;
  foreach (field_info_instances($form['#entity_type'], $bundle) as $field_name => $info) {
    if ($info['widget']['type'] == 'lineage_select') {
      $widget_settings = $info['widget']['settings'];
      $lineage = array();
      $language = isset($form['language']) ? $form['language']['#value'] : LANGUAGE_NONE;
      // @ignore sniffer_array_array_longlinedeclaration
      if ($values = drupal_array_get_nested_value($form_state, array(
        'values',
        $field_name,
        $language,
      ))
      ) {
        foreach ($values as $value) {
          $lineage[$value['tid']]['tid'] = $value['tid'];
          if (isset($widget_settings['save_lineage']) && $widget_settings['save_lineage'] == TRUE) {
            // @ignore sniffer_array_array_longlinedeclaration
            $parent = db_select('taxonomy_term_hierarchy', 't')
              ->fields('t', array('parent'))->condition('tid', $value['tid'])
              ->execute()->fetch(PDO::FETCH_COLUMN);
            if ($parent) {
              $lineage[$parent]['tid'] = $parent;
            }
          }
        }
        $lineage = array_values($lineage);
        // @ignore sniffer_array_array_longlinedeclaration
        drupal_array_set_nested_value($form_state, array(
          'values',
          $field_name,
          $language,
        ), $lineage);
      }
    }
  }
}

/**
 * When on a node full page with node in draft status returns current VID.
 */
function agri_core_views_context_filter_get_current_workbench_vid() {

  $node = menu_get_object();
  if (!is_numeric(arg(2)) && arg(2) == 'draft') {
    if (isset($node->workbench_moderation['current']->vid)) {
      return $node->workbench_moderation['current']->vid;
    }
  }
  return $node->vid;
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function agri_core_ds_pre_render_alter(&$layout_render_array, $context) {

  if ($context['entity_type'] == 'node'
    // Check if bundle is not page, because it uses 3 column without table.
    && $context['bundle'] != 'page'
    && $context['view_mode'] == 'full'
  ) {
    if (isset($layout_render_array['header'])) {
      $layout_render_array['header'] = array(
        '#theme' => 'ds_header_table',
        '#fields' => $layout_render_array['header'],
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function agri_core_theme() {

  $path = drupal_get_path('module', 'agri_core');

  return array(
    'ds_header_table' => array(
      'variables' => array('fields' => NULL),
    ),
    'agri_user_login' => array(
      'variables' => array('user' => NULL),
      'template' => 'agri_core_user_login_block',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements theme_ds_header_table().
 */
function theme_ds_header_table($variables) {

  // Start to manipulate some conditional fields display.
  $data = array_column($variables['fields'], NULL, '#field_name');

  // Conditional field other event type in Events.
  if (array_key_exists('field_event_type', $data) && array_key_exists('field_event_type_other', $data)) {

    if ($data['field_event_type'][0]['#markup'] == 'Other') {
      $data['field_event_type'][0]['#markup'] = $data['field_event_type_other'][0]['#markup'];
      unset($data['field_event_type_other']);
    }
    else {
      unset($data['field_event_type_other']);
    }
  }

  // Sitewide other location field.
  if (array_key_exists('field_core_geographical_area', $data) && array_key_exists('field_core_other_location', $data)) {
    $position = array_search('Other', array_column($data['field_core_geographical_area'], '#markup'));

    if ($position !== FALSE) {
      $data['field_core_geographical_area'][$position]['#markup'] = $data['field_core_other_location'][0]['#markup'];
      unset($data['field_core_other_location']);
    }
    else {
      unset($data['field_core_other_location']);
    }
  }

  // Funding opportunities specific other location field.
  if (array_key_exists('field_news_other_location', $data)) {
    if (array_key_exists('field_news_geographical_area', $data)) {

      $position = array_search('Other', array_column($data['field_news_geographical_area'], '#markup'));

      if ($position !== FALSE) {
        $data['field_news_geographical_area'][$position]['#markup'] = $data['field_news_other_location'][0]['#markup'];
        unset($data['field_news_other_location']);
      }
      else {
        unset($data['field_news_other_location']);
      }
    }
    else {
      unset($data['field_news_other_location']);
    }
  }

  $variables['fields'] = array_values($data);

  foreach ($variables['fields'] as $field) {

    $row = array();

    if (isset($field['#label_display'])) {
      $field['#label_display'] = 'hidden';
    }

    $row[] = array(
      'data' => isset($field['#title']) ? check_plain($field['#title']) : '',
      'class' => array(
        'table-details-label-column bold background-grey align-right',
      ),
    );
    $row[] = array(
      'data' => drupal_render($field),
      'class' => array('grey'),
      'no_striping' => TRUE,
    );
    $rows[] = array(
      'data' => $row,
      'no_striping' => TRUE,
    );
  }

  if (!empty($rows)) {
    $output = theme('table',
      array(
        'header' => '',
        'rows' => $rows,
        'attributes' => array(
          'class' => array('table table-condensed table-bordered small'),
        ),
      )
    );

    return $output;

  }

  else {
    return;
  }
}

/**
 * Implements hook_preprocess().
 */
function agri_core_preprocess_agri_user_login(&$variables) {
  $user_wrapper = entity_metadata_wrapper('user', $variables['user']);

  if (!empty($user_wrapper->uid->value())) {

    $uid = $user_wrapper->uid->value();
    $firstname_field = $user_wrapper->field_firstname->value();
    $lastname_field = $user_wrapper->field_lastname->value();
    $name = $firstname_field . ' ' . $lastname_field;
    $logout_link = _is_ecas_user($variables['user']) ? 'ecaslogout' : 'user/logout';

    $variables['name'] = t('Welcome, <strong>@name</strong>', array('@name' => $name));

    $items = array(
      array(
        'data' => l(t("My Account"), 'user', array(
          'attributes' => array(
            'id' => 'view-profile',
          ),
        )),
      ),
      array(
        'data' => l(t("Edit Profile"), 'user/' . $uid . '/edit', array(
          'attributes' => array(
            'id' => 'edit-profile',
          ),
        )),
      ),
      array(
        'data' => l(t("Logout"), $logout_link, array(
          'attributes' => array(
            'id' => 'logout',
          ),
        )),
      ),
    );

    $data = array(
      'items' => $items,
      'type' => 'ul',
      'attributes' => array(
        'class' => 'dropdown-menu',
      ),
    );

    $variables['link_list'] = theme('dropdown', $data);
  }

  $variables['anonymous'] = l(t('My Account'), 'ecas', array(
    'attributes' => array(
      'class' => array('username'),
    ),
  ));
}

/**
 * Implements hook_action_info().
 */
function agri_core_action_info() {
  return array(
    'agri_core_export_action' => array(
      'type' => 'entity',
      'label' => t('Export data using Views Data Export views displays'),
      'configurable' => FALSE,
      'vbo_configurable' => TRUE,
    ),
    'agri_core_wb_publish_action' => array(
      'type' => 'node',
      'label' => t('Workbench moderation change to publish state'),
      // A valid VBO access operation must be given as behavior.
      'behavior' => array(VBO_ACCESS_OP_UPDATE),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
    ),
  );
}

/**
 * The settings form for this action.
 */
function agri_core_export_action_views_bulk_operations_form($options, $entity_type, $dom_id) {

  $form = array();
  $form['view_display'] = array(
    '#type' => 'select',
    '#title' => t('Select Views Export display'),
    '#options' => agri_core_get_export_displays(),
    '#default_value' => $options['view_display'],
  );
  return $form;
}

/**
 * Action form callback.
 */
function agri_core_export_action_form($context, &$form_state) {

  $form = array();
  if ($settings = $form_state['operation']->getAdminOption('settings')) {

    list($name, $display_id) = explode(':', $settings['view_display']);
    $view = views_get_view($name);
    $view->build($display_id);

    $options = array();
    foreach ($view->field as $field_name => $field) {
      $options[$field_name] = $field->options['label'] ? $field->options['label'] : $field->definition['title'];
    }
    $form['fields'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => t('Choose fields to export'),
      '#options' => $options,
      '#default_value' => array_keys($options),
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Action form submit callback.
 */
function agri_core_export_action_submit($form, $form_state) {

  if ($settings = $form_state['operation']->getAdminOption('settings')) {

    list($name, $display_id) = explode(':', $settings['view_display']);
    $view = views_get_view($name);
    $view->views_data_export_vbo['fields'] = $form_state['values']['fields'];
    $view->views_data_export_vbo['selection'] = $form_state['selection'];
    $view->views_data_export_vbo['select_all_pages'] = $form_state['select_all_pages'];
    $view->execute_display($display_id);
  }
  return array();
}

/**
 * Publishes a current revision through workbench moderation functions.
 *
 * @param object $node
 *   A node object.
 * @param array $context
 *   Context array.
 */
function agri_core_wb_publish_action($node, array $context = array()) {
  if (!isset($node) || empty($node)) {
    return;
  }

  // Moderate current loaded node to published status.
  workbench_moderation_moderate(workbench_moderation_node_current_load($node), workbench_moderation_state_published());
}

/**
 * Implements hook_views_post_build().
 */
function agri_core_views_post_build(&$view) {

  // Exclude from display fields that are not selected.
  if (isset($view->views_data_export_vbo)) {
    foreach ($view->field as $field_name => $field) {
      if (!in_array($field_name, $view->views_data_export_vbo['fields'])) {
        $view->field[$field_name]->options['exclude'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function agri_core_views_pre_render(&$view) {

  // Exclude not selected rows.
  if (isset($view->views_data_export_vbo) && !$view->views_data_export_vbo['select_all_pages']) {
    foreach ($view->result as $key => $result) {
      if (!in_array($result->{$view->base_field}, $view->views_data_export_vbo['selection'])) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Helper: get all configured export display.
 */
function agri_core_get_export_displays() {

  $options = array();
  $views = views_get_enabled_views();
  foreach ($views as $view_name => $view) {
    foreach ($view->display as $display_name => $display) {
      if ($display->display_plugin == 'views_data_export') {
        $key = "{$view_name}:{$display_name}";
        $value = "{$view->human_name} - {$display->display_title} ({$view_name})";
        $options[$key] = $value;
      }
    }
  }
  return $options;
}

/**
 * Add collaborative area menu items.
 *
 * @see agri_core_menu()
 */
function agri_core_menu_forum() {

  $items = array(
    'node/%node/forum',
    'node/%node/forum/%forum_forum',
    'node/%node/forum/add',
  );

  return $items;
}

/**
 * Implements hook_og_permission().
 */
function agri_core_og_permission() {
  $perms = array();

  $perms['access collab forum'] = array(
    'title' => t('Access Collaborative Areas forum'),
    'description' => t('Access forums inside Collaborative Areas Groups.'),
    'default role' => array(OG_AUTHENTICATED_ROLE),
  );

  return $perms;
}

/**
 * Menu item access callback.
 *
 * @see agri_core_menu_forum()
 */
function agri_core_menu_forum_access_callback() {
  // Avoid maximum function nesting level that may occur with menu_get_obect().
  $node = node_load(arg(1));
  $context = og_context('node', $node);

  if (!$context) {
    $context = og_context();
  }

  if ($context) {
    return og_ui_user_access_group('access collab forum', $context['group_type'], $context['gid']);
  }
  return FALSE;
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function agri_core_og_context_negotiation_info() {

  $providers = array();
  $providers['agri_core_collaborative_area_forum'] = array(
    'name' => t('AGRI collaborative area forum'),
    'description' => t('Determine context when in group forum paths.'),
    'callback' => 'agri_core_collaborative_area_forum_og_context_negotiation_handler',
    'menu path' => agri_core_menu_forum(),
  );
  return $providers;
}

/**
 * Implements OG negotiation handler callback.
 *
 * @see agri_core_og_context_negotiation_info()
 */
function agri_core_collaborative_area_forum_og_context_negotiation_handler() {

  $node = node_load(arg(1));
  if (og_is_group('node', $node->nid)) {
    return _group_context_handler_entity('node', $node);
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function agri_core_url_outbound_alter(&$path, &$options, $original_path) {
  global $user;

  // hook_url_outbound_alter() is an expensive hook, since we are sure that
  // no anonymous user will ever be able to access a collaborative area forum
  // we only run preg_match() if the user is logged in.
  if ($user->uid && preg_match('|^forum/(.*)?|', $path, $matches)) {
    if (($group = og_context())) {
      $path = 'node/' . $group['gid'] . '/forum';
      if (isset($matches[1])) {
        $path = $path . '/' . $matches[1];
      }
    }
  }

  // Remove any language prefix from OAuth endpoints.
  if (preg_match('|^oauth/authorized2/([0-9]*)|', $path, $matches)) {
    $options['prefix'] = "";
  }
}

/**
 * Implements hook_query_term_access_alter().
 */
function agri_core_query_term_access_alter(QueryAlterableInterface $query) {

  // Only alter forum terms load query.
  $vocabulary = taxonomy_vocabulary_machine_name_load('forums');

  $is_forum_query = FALSE;
  foreach ($query->conditions() as $condition) {
    if (isset($condition['field'])) {
      $is_forum_query = is_string($condition['field']);
      $is_forum_query = $is_forum_query && $condition['field'] == "t.vid";
      $is_forum_query = $is_forum_query && $condition['value'] == $vocabulary->vid;
      if ($is_forum_query) {
        break;
      }
    }
  }
  $is_forum_query = $is_forum_query || (arg(0) == 'forum' && !arg(1));

  if ($is_forum_query) {
    $context = og_context();
    if (isset($context) && $context['group_type'] == "node") {
      $query->join('og_membership', 'og_membership', 't.tid = %alias.etid');
      $query->condition('og_membership.gid', $context['gid']);
      $query->condition('og_membership.entity_type', 'taxonomy_term');
      $query->condition('og_membership.field_name', 'og_group_ref');
      $query->distinct();
    }
    else {
      $subquery = db_select('og_membership', 'o');
      $subquery->fields('o', array('etid'));
      $subquery->condition('o.entity_type', 'taxonomy_term');
      $subquery->condition('o.field_name', 'og_group_ref');

      foreach ($query->getTables() as $table) {
        if ($table['table'] == 'taxonomy_term_data') {
          $query->condition($table['alias'] . '.tid', $subquery, 'NOT IN');
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_forum_node_form_alter(&$form, &$form_state) {
  if (isset($form[OG_AUDIENCE_FIELD])) {
    // Set default group value.
    if (($group = og_context())) {
      if (isset($form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['default']['#options'][$group['gid']])) {
        $form[OG_AUDIENCE_FIELD][LANGUAGE_NONE][0]['default']['#default_value'] = array($group['gid']);
      }
    }
    else {
      // If not in any group then get rid of OG specific fields.
      $form[OG_AUDIENCE_FIELD]['#access'] = FALSE;
      $form[OG_CONTENT_ACCESS_FIELD]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_core_form_webform_configure_form_alter(&$form, &$form_state) {

  // Check if Webform Scheduler is enabled.
  if (module_exists('webform_scheduler')) {

    // Adds another setting to date_popup field set by
    // Webform Scheduler module to validate against DATE_FORMAT_DATETIME.
    if (module_exists('date_popup')) {
      $date_popup = array(
        '#date_format' => 'd/m/Y H:i',
      );

      // Merge Webform Scheduler field settings with our custom settings.
      $form['scheduler']['date_start'] = array_merge($form['scheduler']['date_start'], $date_popup);
      $form['scheduler']['date_end'] = array_merge($form['scheduler']['date_end'], $date_popup);
    }
  }
}

/**
 * Menu item title callback for the 'user' path.
 *
 * @return null|string
 *   Returns different string based on user login status.
 */
function agri_core_user_menu_title() {
  return user_is_logged_in() ? t('My EIP-AGRI') : t('User account');
}

/**
 * Access callback for deleting own comment.
 */
function agri_core_delete_comment_access($comment) {
  global $user;

  $access = ($user->uid
    && $user->uid == $comment->uid
    && $comment->status == COMMENT_PUBLISHED
    && (user_access('delete own comments') || user_access('administer comments'))
  );

  return $access;
}

/**
 * Implements hook_comment_view().
 */
function agri_core_comment_view($comment, $view_mode, $langcode) {
  // We only need to add the delete link if it's not there.
  if (!isset($comment->content['links']['comment']['#links']['comment-delete']) && agri_core_delete_comment_access($comment)) {
    $comment->content['links']['comment']['#links']['comment-delete'] = array(
      'title' => t('delete'),
      'href' => "comment/$comment->cid/delete-own",
      'html' => TRUE,
    );
  }
}

/**
 * Confirm form for deleting own comment.
 *
 * We can't use the core comment_confirm_delete() because it talks about
 * deleting replies, and also mollom hooks into that form which is not
 * appropriate for end-users.
 */
function agri_core_confirm_delete($form, &$form_state, $comment) {
  $form['#comment'] = $comment;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $comment->cid,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to delete the comment %title?', array('%title' => $comment->subject)),
    'node/' . $comment->nid,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel'),
    'commentdelete_confirm_delete');
}

/**
 * Form submit function copied from comment_confirm_delete_submit().
 *
 * The user-visible and watchdog messages are different from core.
 */
function agri_core_confirm_delete_submit($form, &$form_state) {
  global $user;

  $comment = $form['#comment'];
  // Delete the comment and its replies.
  comment_delete($comment->cid);
  drupal_set_message(t('The comment has been deleted.'));
  watchdog('content', 'User %name (@uid) deleted own comment @cid.', array(
    '%name' => $user->name,
    '@uid' => $user->uid,
    '@cid' => $comment->cid,
  ));
  // Clear the cache so an anonymous user sees that his comment was deleted.
  cache_clear_all();

  $form_state['redirect'] = "node/$comment->nid";
}

/**
 * Implements hook_entity_view_alter().
 */
function agri_core_entity_view_alter(&$build, $type) {
  // Replace image link with the destination provided by the link field.
  if ($type == 'bean' && $build['#bundle'] == 'agri_static_block') {

    if (!isset($build['field_agri_core_bean_link']) || !isset($build['field_agri_core_bean_image'])) {
      return;
    }

    $link_field_item = reset($build['field_agri_core_bean_link']['#items']);

    $uri = array(
      'path' => $link_field_item['url'],
      'options' => array('attributes' => $link_field_item['attributes']),
    );

    $build['field_agri_core_bean_image'][0]['#path'] = $uri;
  }
}

/**
 * Validate a Specify other location inside field collection.
 *
 * @param array $form_state
 *   The form state passed from the form submit.
 */
function _agri_core_other_location_validate(array &$form_state) {

  $term = taxonomy_get_term_by_name("Other", "core_geographical_area");
  $other_term_id = key($term);

  $country = $form_state['values']['field_organization_collection'][LANGUAGE_NONE][0]['field_core_geographical_area'][LANGUAGE_NONE][0];
  $specify_country = $form_state['values']['field_organization_collection'][LANGUAGE_NONE][0]['field_core_other_location'][LANGUAGE_NONE][0]['value'];

  if ($specify_country == "" && $country == $other_term_id) {
    form_set_error('field_organization_collection][' . LANGUAGE_NONE . '][0][field_core_other_location', t('Specify other location cannot be empty'));
  }
}

/**
 * Set the countries ISO code (alpha2) from module 'ec_world_countries'.
 *
 * @param string $vocabulary_name
 *   Name of the vocabulary where to set the ISO codes.
 * @param string $field
 *   ISO code field.
 */
function _agri_core_set_isocode_geographical_area($vocabulary_name = NULL, $field = NULL) {

  if (empty($field) || !isset($field)) {
    return;
  }

  if (module_load_include('php', 'ec_world_countries', 'includes/countries')) {
    $country_array = ec_world_countries_countries();
    $europe_country = $country_array['Europe'];
  }

  if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
    $tree = taxonomy_get_tree($vocabulary->vid, 0, 1);
    foreach ($tree as $term) {
      if ($iso_code = array_search($term->name, $europe_country)) {
        $term_wrapper = entity_metadata_wrapper('taxonomy_term', taxonomy_term_load($term->tid));
        $term_wrapper->$field->set($iso_code);
        $term_wrapper->save();
      }
    }
  }
}

/**
 * Helper function to get EU countries phone codes.
 */
function _agri_core_get_countries_phone_codes() {

  $data = db_select('field_data_field_core_phone_code', 'fdpc')
    ->fields('fdpc', array('entity_id', 'field_core_phone_code_value'))
    ->execute()->fetchAllKeyed();

  return $data;
}

/**
 * Importer for taxonomy "Tags" (only macrocategories) from csv.
 *
 * @param string $file
 *   The path to csv file.
 */
function _agri_core_drush_import_macrokeywords($file = NULL) {
  global $language;
  drush_print('Start process...');

  $dataset = _agri_core_get_dataset($file);
  $voc = taxonomy_vocabulary_machine_name_load('tags');

  foreach ($dataset as $row) {
    $terms = taxonomy_get_term_by_name($row[0], 'tags');

    // Update term name.
    if (!empty($terms)) {
      foreach ($terms as $term) {
        $parent = taxonomy_get_parents($term->tid);
        if (empty($parent)) {
          $term->name = $row[1];
          taxonomy_term_save($term);
          watchdog('agri_core', 'Edit term name @old_name to @new_name', array('@old_name' => $row[0], '@new_name' => $row[1]));
        }
      }
    }

    // New term.
    if (empty($terms) && $row[1] == "") {
      $term = new stdClass();
      $term->vid = $voc->vid;
      $term->parent = 0;
      $term->name = $row[0];
      $term->language = $language->language;
      $term->format = 'plain_text';
      taxonomy_term_save($term);
      watchdog('agri_core', 'Add new term: @new_term', array('@new_term' => $row[0]));
    }
  }

  drush_print('End process.');
}

/**
 * Reset all parents for each child.
 */
function _agri_core_drush_clear_all_parents_keywords() {
  drush_print('Reset all parents for each child.');

  $voc = taxonomy_vocabulary_machine_name_load('tags');
  $tree = taxonomy_get_tree($voc->vid);

  foreach ($tree as $term) {
    $term->parent = 0;
    taxonomy_term_save($term);
  }
}

/**
 * Update name of keyword(s) from file .csv.
 */
function _agri_core_drush_update_name_keywords() {
  drush_print('Start process...');
  $file = drupal_get_path('module', 'agri_core') . '/csv/keywords/keywords_updated.csv';
  $dataset = _agri_core_get_dataset($file);
  $index = 0;

  foreach ($dataset as $row) {
    $terms = taxonomy_get_term_by_name($row[0], 'tags');

    // Update term name.
    if (!empty($terms)) {
      foreach ($terms as $term) {
        $parent = taxonomy_get_parents($term->tid);
        if (!empty($parent)) {
          $term->name = $row[1];
          taxonomy_term_save($term);
          $index++;
          watchdog('agri_core', 'Edit term name @old_name to @new_name', array('@old_name' => $row[0], '@new_name' => $row[1]));
        }
      }
    }
  }

  drush_print('Updated ' . format_plural($index, '@index term', '@index terms', array('@index' => $index)));
  drush_print('End process.');
}

/**
 * Importer for taxonomy "Tags" from csv.
 */
function agri_core_drush_batch_config() {

  drush_print('Start process...');

  $voc = taxonomy_vocabulary_machine_name_load('tags');
  $macro_categories = taxonomy_get_tree($voc->vid, 0, 1);

  _agri_core_drush_clear_all_parents_keywords();

  // Read file(s) .csv and create the dataset.
  foreach ($macro_categories as $term) {
    $path = drupal_get_path('module', 'agri_core') .
      '/csv/keywords/' . str_replace('/', '_', $term->name) . '.csv';
    $dataset[$term->tid] = _agri_core_get_dataset($path);
  }

  foreach ($dataset as $tid_parent => $child_rows) {
    foreach ($child_rows as $child_name) {
      $term = taxonomy_get_term_by_name($child_name[0], 'tags');
      if (empty($term)) {
        $new_elements[$child_name[0]][$tid_parent] = $tid_parent;
      }
      else {
        $dataset_tree[$child_name[0]][$tid_parent] = $tid_parent;
      }
    }
  }

  // Add new term(s).
  if (!empty($new_elements)) {
    foreach ($new_elements as $term_name => $term_parents) {
      $operation[] = array(
        'agri_core_batch_add_op_callback',
        array(
          $term_name,
          $term_parents,
        ),
      );
    }
  }

  // Edit the term(s).
  if (!empty($dataset_tree)) {
    foreach ($dataset_tree as $term_name => $term_parents) {
      $operation[] = array(
        'agri_core_batch_edit_op_callback',
        array(
          $term_name,
          $term_parents,
        ),
      );
    }
  }

  $batch = array(
    'operations' => $operation,
    'finished' => 'agri_core_batch_finished_callback',
    'file' => drupal_get_path('module', 'agri_core') . '/agri_core.batch.inc',
  );

  batch_set($batch);
  $batch = &batch_get();
  $batch['progressive'] = FALSE;

  drush_backend_batch_process();

}

/**
 * Get data from CSV.
 *
 * @param string $file
 *   The path to file to parse.
 *
 * @return array
 *   Returns an array of data to use to fill node fields.
 */
function _agri_core_get_dataset($file) {
  $dataset = array();
  if (file_exists($file)) {
    if (($handle = fopen($file, "r")) !== FALSE) {
      $flag = TRUE;
      while (($data = fgetcsv($handle)) !== FALSE) {
        if ($flag) {
          $flag = FALSE;
          continue;
        }
        $dataset[] = $data;
      }
      fclose($handle);
    }
  }
  else {
    drush_log('File ' . $file . ' not exists.', 'notice');
  }
  return $dataset;
}

/**
 * Override poll_page callback.
 */
function agri_core_poll_page() {
  $polls_per_page = 15;

  $count_select = db_select('node', 'n');
  $count_select->addExpression('COUNT(*)', 'expression');
  $count_select->join('poll', 'p', 'p.nid = n.nid');
  $count_select->condition('n.status', 1);

  // List all polls.
  $select = db_select('node', 'n');
  $select->join('poll', 'p', 'p.nid = n.nid');
  $select->join('poll_choice', 'c', 'c.nid = n.nid');
  $select->addExpression('SUM(c.chvotes)', 'votes');
  $select = $select->fields('n', array('nid', 'title', 'created'))
    ->fields('p', array('active'))
    ->condition('n.status', 1)
    ->orderBy('n.created', 'DESC')
    ->groupBy('n.nid')
    ->groupBy('n.title')
    ->groupBy('p.active')
    ->groupBy('n.created')
    ->extend('PagerDefault')
    ->limit($polls_per_page)
    ->addTag('node_access');
  $select->setCountQuery($count_select);
  $queried_nodes = $select->execute()
    ->fetchAllAssoc('nid');

  $output = '<ul>';
  foreach ($queried_nodes as $node) {
    $output .= '<li>' . l($node->title, "node/$node->nid") . ' - ' . ($node->active ? t('open') : t('closed')) . '</li>';
  }
  $output .= '</ul>';
  $output .= theme('pager');
  return $output;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function agri_core_entity_property_info_alter(&$info) {

  $info['user']['properties']['field_firstname_for_searching'] = array(
    'type' => 'text',
    'label' => t('First name (for searching)'),
    'getter callback' => 'agri_core_search_api_custom_firstname_fulltext_getter_callback',
  );

  $info['user']['properties']['field_lastname_for_searching'] = array(
    'type' => 'text',
    'label' => t('Last name (for searching)'),
    'getter callback' => 'agri_core_search_api_custom_lastname_fulltext_getter_callback',
  );

}

/**
 * Helper Function to return data for new firstname field.
 *
 * @param object $item
 *   The item to get info from.
 *
 * @return string
 *   The string returned.
 */
function agri_core_search_api_custom_firstname_fulltext_getter_callback($item) {
  return (isset($item->field_firstname[LANGUAGE_NONE][0]['safe_value'])) ? $item->field_firstname[LANGUAGE_NONE][0]['safe_value'] : '';
}

/**
 * Helper Function to return data for new lastname field.
 *
 * @param object $item
 *   The item to get info from.
 *
 * @return string
 *   The string returned.
 */
function agri_core_search_api_custom_lastname_fulltext_getter_callback($item) {
  return (isset($item->field_lastname[LANGUAGE_NONE][0]['safe_value'])) ? $item->field_lastname[LANGUAGE_NONE][0]['safe_value'] : '';
}

/**
 * EIPAGRI-462: rename "View published" tab for collaborative area content type.
 */
function _agri_core_collaborative_area_view_tab_title() {

  // Get node informations.
  $node = menu_get_object();

  if ($node) {

    if ($node->type != 'collaborative_area') {

      // Use the normal tab title if the node is not under moderation.
      if (!workbench_moderation_node_moderated($node)) {
        return t('View');
      }

      $state = $node->workbench_moderation;
      if (!empty($state['published'])) {
        return t('View published');
      }
      return t('View draft');
    }

    else {

      // Use the normal tab title if the node is not under moderation.
      if (!workbench_moderation_node_moderated($node)) {
        return t('View');
      }

      $state = $node->workbench_moderation;
      // Set specific title for collaborative areas.
      if (!empty($state['published'])) {
        return t('Collaborative area');
      }
      return t('View draft');
    }
  }

  else {
    return t('Collaborative area');
  }
}

/**
 * Helper function to update wysywig profile buttons.
 *
 * @param string $format
 *   The format name to update.
 * @param string $editor
 *   The Editor used (Ckeditor, TinyMCE, etc...).
 * @param string $button
 *   The name of the button to enable in buttons' array list.
 */
function _agri_core_wysiwyg_profile_update_buttons($format, $editor, $button) {
  $full_profile = db_select('wysiwyg', 'wy')
    ->fields('wy', array('settings'))
    ->condition('format', $format)
    ->condition('editor', $editor)
    ->execute()->fetchField();

  $full_profile = unserialize($full_profile);
  $updated = $full_profile;
  $updated['buttons'][$button] = array(
    $button => 1,
  );

  $full_profile = array_merge($full_profile, $updated);

  db_update('wysiwyg')
    ->fields(array('settings' => serialize($full_profile)))
    ->condition('format', $format)
    ->condition('editor', $editor)
    ->execute();
}

/**
 * Helper function to update enabled filters on Full HTML profile.
 *
 * @param string $format
 *   The format of the filter to update.
 * @param string $module
 *   The name of the module that provides the filter.
 * @param string $filter
 *   The name of the filter.
 * @param string $default_title
 *   The default title for the filter.
 */
function _agri_core_filter_update($format, $module, $filter, $default_title) {

  $settings = array(
    'form' => 0,
    'default_title' => $default_title,
  );

  db_insert('filter')
    ->fields(array(
      'format' => $format,
      'module' => $module,
      'name' => $filter,
      'weight' => 0,
      'status' => 1,
      'settings' => serialize($settings),
    ))
    ->execute();
}

/**
 * EIPAGRI-459: Create "EIP AGRI Service Point" admin user.
 */
function _agri_core_create_agri_admin_user() {

  // Get admin role rid.
  $rid = array_search('administrator', user_roles());

  // Set generic taxonomy fields to fill user profile required fields.
  $field_of_activity = taxonomy_get_term_by_name('Not applicable', 'field_of_activity');
  $field_user_featured_internal_db = 1;
  $field_user_accept_terms = 1;

  $agri_default_user_firstname = 'EIP AGRI';
  $agri_default_user_lastname = 'Service Point';
  $agri_default_user_realname = $agri_default_user_firstname . " " . $agri_default_user_lastname;
  $agri_default_user_mail = 'servicepoint@eip-agri.eu';

  $user_obj = new StdClass();
  $user_obj->name = 'eipagrisp';
  $user_obj->pass = '';
  $user_obj->init = $agri_default_user_mail;
  $user_obj->mail = $agri_default_user_mail;
  $user_obj->status = 1;
  $user_obj->roles = array(
    DRUPAL_AUTHENTICATED_RID => 'authenticated_user',
    $rid => 'administrator',
  );

  // Change some user details like firstname and email.
  $user_obj->field_firstname[LANGUAGE_NONE][0]['value'] = $agri_default_user_firstname;
  $user_obj->field_lastname[LANGUAGE_NONE][0]['value'] = $agri_default_user_lastname;
  $user_obj->field_realname = $agri_default_user_realname;
  $user_obj->field_user_gender[LANGUAGE_NONE][0]['value'] = 'Male';
  $user_obj->field_user_accept_terms[LANGUAGE_NONE][0]['value'] = $field_user_accept_terms;
  $user_obj->field_user_featured_internal_db[LANGUAGE_NONE][0]['value'] = $field_user_featured_internal_db;

  // Save data.
  user_save($user_obj);
  $new_user = user_load_by_name('eipagrisp');

  // Fill field collection fields' values.
  $fc_item = entity_create('field_collection_item',
    array('field_name' => 'field_organization_collection')
  );

  $fc_item->setHostEntity('user', $new_user);
  $fc_wrapper = entity_metadata_wrapper('field_collection_item', $fc_item);
  $fc_wrapper->field_organization_name->set('EIP-AGRI');
  $fc_wrapper->field_organization_city->set('Bruxelles');
  $fc_wrapper->field_organization_address->set('-');
  $fc_wrapper->field_user_phone->set('+32');
  $fc_wrapper->field_organization_activity->set($field_of_activity);

  $fc_wrapper->save(TRUE);

  db_update('node')
    ->fields(array('uid' => $new_user->uid))
    ->condition('uid', 1)
    ->execute();

  db_update('node_revision')
    ->fields(array('uid' => $new_user->uid))
    ->condition('uid', 1)
    ->execute();
}

/**
 * Implements hook_webform_select_options_info().
 */
function agri_core_webform_select_options_info() {

  $items = array();

  $vocabularies = taxonomy_get_vocabularies();

  foreach ($vocabularies as $voc) {
    $items['vid_' . $voc->vid] = array(
      'title' => $voc->name,
      'options callback' => '_agri_core_vocabulary_terms',
    );
  }

  return $items;
}

/**
 * Option list containing all terms of specified vocabulary.
 *
 * @parameter array $voc_id
 *   The items data sent from agri_core_webform_select_options_info().
 */
function _agri_core_vocabulary_terms(array $voc_id) {

  // Get the numeric value of the vocabulary parameter.
  $vid = drupal_substr($voc_id['extra']['options_source'], 4, 2);
  $tree = taxonomy_get_tree($vid);

  $options = array();

  foreach ($tree as $item) {
    if ($item->depth == 0) {
      $options[$item->tid] = $item->name;
    }
    else {
      $parent_tid = $item->parents[0];
      $parent_term = taxonomy_term_load($parent_tid);
      $parent_term_name = $parent_term->name;
      $options[$item->tid] = $parent_term_name . ' > ' . $item->name;
    }
  }

  return $options;
}

/**
 * Override some Multisite core components.
 */
function _agri_core_overrides_all() {
  module_invoke_all('override_multisite_components');
}

/**
 * Override some Multisite core components.
 */
function agri_core_override_multisite_components() {
  _agri_core_set_default_bundle_settings();
  _agri_core_reset_menu_attributes();
  _agri_core_restore_overrides();

  // Override Multisite permissions.
  _agri_core_overrides_permission();
  _agri_core_set_og_permission();

  // Sets what bundles on the specified entity type should be indexed.
  _agri_core_apache_solr_set_bundle_to_index();

  // Create/Update Solr related blocks.
  _agri_core_create_apachesolr_mlt_blocks();

  watchdog('agri_core', 'Override multisite components');
}

/**
 * Manually set field_bundle_settings_node after upgrading to Multisite 1.6.
 */
function _agri_core_set_default_bundle_settings() {

  // Setting field_bundle_settings_node__event.
  $value = array(
    'view_modes' => array(
      'full' => array(
        'custom_settings' => TRUE,
      ),
      'teaser' => array(
        'custom_settings' => TRUE,
      ),
      'rss' => array(
        'custom_settings' => FALSE,
      ),
      'search_index' => array(
        'custom_settings' => FALSE,
      ),
      'search_result' => array(
        'custom_settings' => FALSE,
      ),
      'diff_standard' => array(
        'custom_settings' => FALSE,
      ),
      'print' => array(
        'custom_settings' => FALSE,
      ),
      'token' => array(
        'custom_settings' => FALSE,
      ),
      'revision' => array(
        'custom_settings' => FALSE,
      ),
      'core_small_teaser' => array(
        'custom_settings' => TRUE,
      ),
      'core_spotlight' => array(
        'custom_settings' => FALSE,
      ),
    ),
    'extra_fields' => array(
      'form' => array(
        'title' => array(
          'weight' => '-10',
        ),
        'path' => array(
          'weight' => '15',
        ),
        'xmlsitemap' => array(
          'weight' => '14',
        ),
      ),
      'display' => array(
        'webform' => array(
          'full' => array(
            'weight' => '9',
            'visible' => TRUE,
          ),
          'teaser' => array(
            'weight' => '16',
            'visible' => FALSE,
          ),
        ),
      ),
    ),
  );
  variable_set('field_bundle_settings_node__event', $value);

  // Setting field_bundle_settings_node__news.
  $value = array(
    'view_modes' => array(
      'full' => array(
        'custom_settings' => TRUE,
      ),
      'teaser' => array(
        'custom_settings' => TRUE,
      ),
      'rss' => array(
        'custom_settings' => FALSE,
      ),
      'search_index' => array(
        'custom_settings' => FALSE,
      ),
      'search_result' => array(
        'custom_settings' => FALSE,
      ),
      'diff_standard' => array(
        'custom_settings' => FALSE,
      ),
      'print' => array(
        'custom_settings' => FALSE,
      ),
      'token' => array(
        'custom_settings' => FALSE,
      ),
      'revision' => array(
        'custom_settings' => FALSE,
      ),
      'core_spotlight' => array(
        'custom_settings' => TRUE,
      ),
      'core_small_teaser' => array(
        'custom_settings' => TRUE,
      ),
    ),
    'extra_fields' => array(
      'form' => array(
        'title' => array(
          'weight' => '-10',
        ),
        'path' => array(
          'weight' => '12',
        ),
        'xmlsitemap' => array(
          'weight' => '13',
        ),
      ),
      'display' => array(),
    ),
  );
  variable_set('field_bundle_settings_node__news', $value);

}

/**
 * Reset User Menu attributes after upgrading to Multisite 1.6.
 */
function _agri_core_reset_menu_attributes() {

  $items = array(
    'user/login',
    'user/logout',
    'admin/workbench',
    'user',
  );
  $attributes = array();
  db_update('menu_links')
    ->fields(array('options' => serialize($attributes)))
    ->condition('link_path', $items)
    ->condition('menu_name', 'user-menu')
    ->execute();
}

/**
 * Global workaround to set all overrided permission.
 */
function _agri_core_overrides_permission() {

  $revoke = array(
    'administrator' => array(
      'create article content',
      'delete any article content',
      'delete own article content',
      'edit any article content',
      'edit own article content',
    ),
    'authenticated user' => array(
      'access workbench',
    ),
    'contributor' => array(
      'administer newsletters',
      'administer simplenews settings',
      'administer simplenews subscriptions',
      'create article content',
      'delete any article content',
      'delete any event content',
      'delete any news content',
      'delete own article content',
      'edit any article content',
      'edit any event content',
      'edit any news content',
      'edit own article content',
      'send newsletter',
    ),
    'editor' => array(
      'create article content',
      'create community content',
      'delete any article content',
      'delete any community content',
      'delete own article content',
      'delete own community content',
      'edit any article content',
      'edit any community content',
      'edit own article content',
      'edit own community content',
      'export nodes',
      'moderate content from needs_review to published',
    ),
  );

  $grant = array(
    'administrator' => array(
      'access all webform results',
      'administer agri taxonomies',
      'administer users',
      'create collaborative_area content',
      'create forum content',
      'create simplenews content',
      'delete all webform submissions',
      'delete any collaborative_area content',
      'delete any forum content',
      'delete any simplenews content',
      'delete own simplenews content',
      'edit all webform submissions',
      'edit any collaborative_area content',
      'edit any forum content',
      'edit any simplenews content',
      'edit own simplenews content',
    ),
    'anonymous user' => array(
      'show format tips',
      'use search_api_saved_searches',
    ),
    'authenticated user' => array(
      'access own webform results',
      'create forum content',
      'delete own forum content',
      'delete own webform submissions',
      'edit own forum content',
      'edit own webform submissions',
      'show format tips',
      'use search_api_saved_searches',
    ),
    'contributor' => array(
      'access contextual links',
      'access workbench',
      'create page content',
      'create simplenews content',
      'delete own page content',
      'delete own simplenews content',
      'edit own page content',
      'edit own simplenews content',
    ),
    'editor' => array(
      'access all webform results',
      'access contextual links',
      'access workbench',
      'administer agri taxonomies',
      'administer menu',
      'bypass workbench moderation',
      'bypass node access',
      'create collaborative_area content',
      'create forum content',
      'create simplenews content',
      'delete all webform submissions',
      'delete any collaborative_area content',
      'delete any forum content',
      'delete any simplenews content',
      'delete own simplenews content',
      'edit all webform submissions',
      'edit any collaborative_area content',
      'edit any forum content',
      'edit any simplenews content',
      'edit own simplenews content',
      'schedule webforms',
      'translate content',
      'translate interface',
    ),
  );

  $roles = user_roles(FALSE);
  foreach ($roles as $rid => $role) {
    if (isset($revoke[$role])) {
      user_role_revoke_permissions($rid, $revoke[$role]);
    }

    if (isset($grant[$role])) {
      user_role_grant_permissions($rid, $grant[$role]);
    }
  }
}

/**
 * Implements hook_pre_features_revert().
 */
function agri_core_pre_features_revert($component) {
  if ($component == 'workbench_moderation_transitions') {
    if (function_exists('agri_core_workbench_moderation_export_transitions')) {
      $agri_transitions = agri_core_workbench_moderation_export_transitions();

      foreach ($agri_transitions as $transition) {
        $transition = (object) $transition;
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'workbench_moderation_transition')
          ->propertyCondition('from_name', $transition->from_name)
          ->propertyCondition('to_name', $transition->to_name)
          ->propertyCondition('name', $transition->name, '<>');
        $result = $query->execute();

        // Delete duplicated transitions.
        if (isset($result['workbench_moderation_transition']) && count($result['workbench_moderation_transition']) > 0) {
          workbench_moderation_transition_delete($transition);
        }
      }
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function agri_core_views_post_render(&$view, &$output, &$cache) {
  // Hide output of the views taxonomy/term/% for the vocabulary "Stakeholders".
  if ($view->name == 'agri_taxonomy_term') {
    $arguments = $view->argument;
    if ($arguments['term_node_tid_depth']->argument_validated) {
      $terms = entity_load('taxonomy_term', array($arguments['term_node_tid_depth']->argument));
      if ($term = reset($terms)) {
        if ($term->vocabulary_machine_name == 'core_stakeholders') {
          $output = '';
        }
      }
    }
  }
}

/**
 * Implements hook_node_operations().
 */
function agri_core_node_operations() {
  $operations['agri_core_force_update_alias'] = array(
    'label' => t('AGRI Core - Update URL alias (Force)'),
    'callback' => 'pathauto_node_update_alias_multiple',
    'callback arguments' => array(
      'bulkupdate', array(
        'message' => TRUE,
        'force' => TRUE,
      ),
    ),
  );
  return $operations;
}

/**
 * Implements hook_date_formats().
 */
function agri_core_date_formats() {
  return array(
    // Creates a new custom format type.
    array(
      'type' => 'eip_agri_long',
      'format' => 'l, j F, Y',
      'locales' => array(),
    ),
    array(
      'type' => 'eip_agri_medium',
      'format' => 'D, d/m/Y',
      'locales' => array(),
    ),
    array(
      'type' => 'eip_agri_short',
      'format' => 'd/m/Y',
      'locales' => array(),
    ),
  );
}

/**
 * Implements hook_date_format_types().
 */
function agri_core_date_format_types() {
  return array(
    'eip_agri_long' => t('EIP AGRI long'),
    'eip_agri_medium' => t('EIP AGRI medium'),
    'eip_agri_short' => t('EIP AGRI short'),
  );
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function agri_core_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['disableNativeSpellChecker'] = FALSE;
  }

  drupal_add_js(
    array(
      'agri_core' => array(
        'button_label' => t('Spell checker'),
        'dialog_title' => t('Spell checker'),
        'dialog_text' => AGRI_CORE_SPELL_CHECKER_HELP_MESSAGE,
      ),
    ), 'setting');
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function agri_core_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
      return array(
        'spell_checker_helper' => array(
          'path' => drupal_get_path('module', 'agri_core') . '/plugins/spell_checker_helper/',
          'load' => TRUE,
          'internal' => FALSE,
          'buttons' => array(
            'spell_checker_helper' => t('Spell checker help message'),
          ),
        ),
      );
  }
}

/**
 * Implements hook_element_info_alter().
 */
function agri_core_element_info_alter(&$type) {
  if (array_key_exists('text_format', $type)) {

    $replacement = array(
      'filter_process_format',
      'agri_core_filter_process_format',
    );

    $process_format_location = array_search('filter_process_format', $type['text_format']['#process']);

    if (module_exists('better_formats')) {
      $better_format_filter_location = array_search('better_formats_filter_process_format', $type['text_format']['#process']);
      if ($better_format_filter_location !== FALSE) {
        $process_format_location = $better_format_filter_location;
        $replacement[0] = 'better_formats_filter_process_format';
      }
    }

    array_splice($type['text_format']['#process'], $process_format_location, 1, $replacement);
  }
}

/**
 * Process callback for form elements that have a text format selector attached.
 *
 * This callback runs after filter_process_format() or
 * better_formats_filter_process_format() if enabled, and performs additional
 * modifications to the form element.
 *
 * @see filter_process_format()
 * @see better_formats_filter_process_format()
 */
function agri_core_filter_process_format($element) {
  global $theme;

  if ($theme == 'agri_theme') {
    $show_tips = user_access('show format tips');
    $show_tips_link = user_access('show more format tips link');
    $options = $element['format']['format']['#options'];

    // Hide the entire text format fieldset if the user is not supposed to see
    // anything inside it.
    if (count($options) == 1 && !$show_tips && !$show_tips_link) {
      $element['format']['#access'] = FALSE;
    }

    if ($show_tips || $show_tips_link || count($options) > 1) {
      $element['format']['#title'] = t('Text area settings');
      $element['format']['#collapsible'] = TRUE;
      $element['format']['#collapsed'] = TRUE;
      $element['format']['#attributes']['class'][] = 'fieldset-text-format';
    }
  }

  return $element;
}

/**
 * Helper function to get a string tid result from term name.
 *
 * @param string $term_name
 *   The taxonomy term name.
 * @param string $vocabulary_name
 *   The vocabulary name.
 *
 * @return string
 *   Return a string repreentation of the tid returned.
 */
function _agri_core_get_string_tid_from_term_name($term_name, $vocabulary_name) {
  $term = taxonomy_get_term_by_name($term_name, $vocabulary_name);
  $term = reset($term);
  $term_id = (string) $term->tid;

  return $term_id;
}

/**
 * Helper function to create an apachesolr search related content block.
 *
 * @param string $title
 *   The block title displayed to users.
 * @param array $types
 *   The content type solr should search on to fetch related results.
 * @param array $terms
 *   Which taxonomy terms should be compared to match results.
 * @param string $delta
 *   Custom block delta (if NULL, apachesolr will use mlt-001, mlt-002, ...).
 * @param int $results
 *   How many results are displayed in related content block.
 */
function _agri_core_create_apachesolr_search_related_content_block($title, array $types, array $terms, $delta, $results) {

  if (module_exists('apachesolr_search')) {
    module_load_include('inc', 'apachesolr', 'apachesolr_search.admin');

    // Minimal block configuration array to pass to apachesolr function.
    $settings = [
      'delta' => $delta,
      'name' => $title,
      'num_results' => $results,
      'mlt_fl' => $terms,
      'mlt_type_filters' => $types,
    ];

    // Create block with custom settings.
    apachesolr_search_mlt_save_block($settings, $delta);
  }
}

/**
 * Helper function to wrap VBO actions in a custom fieldset.
 *
 * @param array $form
 *   The form to modify.
 * @param string $fieldset_name
 *   String representing the name of the fieldset.
 * @param string $fieldset_title
 *   String representing the name of the fieldset.
 * @param bool $collapsible
 *   (optional) whether the fieldset is collapsible or not. Defaults to FALSE.
 * @param array $attributes
 *   (optional) Custom fieldset attributes. Defaults to empty array.
 * @param array $vbo_operations
 *   (optional) The optional array of operations included in the fieldset.
 *   Defaults to empty array.
 *
 * @return array
 *   Returns the fieldset form element.
 */
function _agri_core_custom_vbo_operations_fieldset(array &$form, $fieldset_name, $fieldset_type, $fieldset_title, $collapsible = FALSE, array $attributes = array(), array $vbo_operations = array()) {

  // Create custom fieldset to include bulk operations.
  $form[$fieldset_name] = [
    '#type' => $fieldset_type,
    '#title' => $fieldset_title,
    '#collapsible' => $collapsible,
    '#attributes' => $attributes,
    'operations' => $vbo_operations,
  ];

  return $form[$fieldset_name];
}

/**
 * Implements hook_quicktabs_tabstyles().
 */
function agri_core_quicktabs_tabstyles() {
  $tabstyles_directory = drupal_get_path('module', 'agri_core') . '/plugins/quicktabs_tabstyles';
  $files = file_scan_directory($tabstyles_directory, '/\.css$/');
  $tabstyles = array();
  foreach ($files as $file) {
    $tabstyles[$file->uri] = drupal_ucfirst(str_replace('_', ' ', $file->name));
  }
  return $tabstyles;
}

/**
 * Custom function to render Brexit Diclaimer.
 *
 * @return array
 *   HTML to render the form submit suffix.
 */
function _agri_core_render_brexit_disclaimer() {
  $brexit_disclaimer = variable_get('agri_core_brexit_disclaimer', array(
    'value' => AGRI_CORE_BREXIT_DISCLAIMER,
    'format' => 'full_html',
  ));

  // Brexit Disclaimer.
  return array(
    '#type' => 'item',
    '#markup' => '<span class="glyphicon glyphicon-info-sign"></span>' . check_markup($brexit_disclaimer['value'], $brexit_disclaimer['format']),
    '#attributes' => array('class' => array('brexit-disclaimer-container')),
    '#theme_wrappers' => array('container'),
  );
}

/**
 * Create custom "agri_static_block" beans programmatically.
 */
function _agri_core_create_agri_static_block_beans() {

  // Get the default custom beans.
  module_load_include('php', 'agri_core', 'data/agri_core_custom_beans');
  $type = 'agri_static_block';
  $beans = _agri_core_get_custom_beans($type);

  foreach ($beans as $delta => $value) {
    if (!bean_load_delta($delta)) {
      $bean = bean_create(array('type' => $type));
      $bean->delta = $delta;
      $bean->label = $value['label'];
      $bean->title = $value['title'];

      // Save a file entity.
      if (isset($value['files'])) {
        $files = $value['files'];
        foreach ($files as $field_name => $file_path) {
          $file = (object) array(
            'uid' => 1,
            'uri' => $file_path,
            'filemime' => file_get_mimetype($file_path),
            'status' => FILE_STATUS_PERMANENT,
            'display' => 1,
          );
          // Save the image file.
          $file = file_copy($file, file_build_uri('/'), FILE_EXISTS_REPLACE);

          if ($file !== FALSE) {
            $value['fields'][$field_name]['fid'] = $file->fid;
          }
        }
      }

      // Add any fields if present.
      if (isset($value['fields'])) {
        $fields = $value['fields'];
        $bean_wrapper = entity_metadata_wrapper('bean', $bean);
        foreach ($fields as $field_name => $field) {
          $bean_wrapper->{$field_name}->set($field);
        }
      }

      $bean->save();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function agri_core_preprocess_views_exposed_form(&$variables) {
  $brexit_visibility = variable_get('agri_core_brexit_visibility', FALSE);

  // First, check if the disclaimer should be shown.
  if ($brexit_visibility) {
    // Exposed filters having geographical info.
    $geographical_filters = array(
      'field_core_geographical_area',
      'field_proj_geographical_area',
      'field_news_geographical_area',
      'field_core_geographical_area_tid_i18n',
      'location',
      'country',
    );

    // Render Brexit Disclaimer.
    if (!empty(array_intersect(array_keys($variables['form']), $geographical_filters))) {
      $variables['theme_hook_suggestions'][] = 'views_exposed_form__brexit';
      $brexit_disclaimer = _agri_core_render_brexit_disclaimer();
      $variables['brexit_disclaimer'] = drupal_render($brexit_disclaimer);
    }
  }
}

/**
 * Reset settings for the menu links.
 *
 * @param string $menu_name
 *   The machine name of menu.
 * @param string $op
 *   The operation performed: 'reset', 'delete', 'update'.
 * @param array $link_list
 *   List of link items to  modify, eg.: array('link_title' => 'link_path').
 * @param bool $rebuild
 *   If TRUE will execute menu_rebuild().
 */
function _agri_core_manage_menu_items($menu_name, $op, $link_list = array(), $rebuild = FALSE) {

  if (isset($menu_name)) {
    $links = menu_load_links($menu_name);

    foreach ($links as $link) {

      // Find menu item matches.
      $menu_item_match = array_key_exists($link['link_title'], $link_list)
        && $link_list[$link['link_title']] == $link['link_path'];

      // If both title and path are found continue to requested operation.
      if ($menu_item_match) {
        if ($op == 'reset') {
          menu_reset_item($link);
        }
        elseif ($op == 'delete') {
          menu_link_delete(NULL, $link['link_path']);
        }
      }
    }
  }
  if ($rebuild) {
    menu_rebuild();
  }
}
