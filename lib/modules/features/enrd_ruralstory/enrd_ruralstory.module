<?php

/**
 * @file
 * Code for the ENRD Rural Story Form feature.
 */

include_once 'enrd_ruralstory.features.inc';

define('ENRD_RURALSTORY_FORM', 'enrd_ruralstory');
define('ENRD_RURALSTORY_FORM_REPORT_VIEW_PATH', 'admin/enrd/enrd-sfr-ruralstory');
define('ENRD_RURALSTORY_PAGE_PATH', 'enrd-sfr/enrd-ruralstory');
define('ENRD_RURALSTORY_STATUS_FIELD', 'field_enrd_ruralstory_status');
define('ENRD_RURALSTORY_STATUS_FLAG_USER', 'field_enrd_ruralstory_flag_user');
define('ENRD_RURALSTORY_STATUS_FLAG', 'enrd_ruralstory_status');

/**
 * Implements hook_module_implements_alter().
 */
function enrd_ruralstory_module_implements_alter(&$module_list, $context) {
  // Make sure ENRD Rural Story's hook implementations is called after shs.
  if ($context == 'field_views_data_alter') {
    $temp = $module_list['enrd_ruralstory'];
    unset($module_list['enrd_ruralstory']);
    $module_list['enrd_ruralstory'] = $temp;
  }
}

/**
 * Implements hook_field_views_data_alter().
 */
function enrd_ruralstory_field_views_data_alter(&$result, $field, $module) {
  // Force right filter handler, modified by SHS's hook_field_views_data_alter.
  // When the field is of type 'entityreference' or 'term refernce', SHS uses
  // either 'shs_handler_filter_entityreference' or
  // 'shs_handler_filter_term_node_tid' own views handlers.
  // The only way to use view's standard handler with a normal select list as
  // field widget is this override that restore the original handler.
  // Without this override only SHS widget will work, but it will not allow
  // to use the 'Render Views filters as select list' behavior of the field.
  // @see https://www.drupal.org/project/entityreference/issues/2268805#comment-9299967
  // @see https://www.drupal.org/project/shs/issues/2309619#comment-9337415
  if (isset($result['field_data_field_enrd_ruralstory_country']['field_enrd_ruralstory_country_target_id']['filter'])) {
    $result['field_data_field_enrd_ruralstory_country']['field_enrd_ruralstory_country_target_id']['filter']['handler'] = 'views_handler_filter_in_operator';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see _enrd_ruralstory_form_customizations()
 */
function enrd_ruralstory_form_enrd_sfr_form_alter(&$form, &$form_state, $form_id) {
  // Apply custom behaviors to the ENRD Sfr bundle.
  if ($form['#entity_type'] == ENRD_SFR_ENTITY_NAME && $form['#bundle'] == ENRD_RURALSTORY_FORM) {
    // Load specific include file for the form.
    form_load_include($form_state, 'inc', 'enrd_ruralstory', 'includes/enrd_ruralstory.form');
    _enrd_ruralstory_form_customizations($form, $form_state);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function enrd_ruralstory_entity_info_alter(&$entity_info) {
  // Enable view page to "Share your Rural Story" entity bundle.
  if (in_array(ENRD_RURALSTORY_FORM, array_keys($entity_info[ENRD_SFR_ENTITY_NAME]['bundles']))) {
    $entity_info[ENRD_SFR_ENTITY_NAME]['bundles'][ENRD_RURALSTORY_FORM]['extra fields controller class'] = 'EntityDefaultExtraFieldsController';
  }
}

/**
 * Create custom "Share your Rural Story Introduction" bean.
 */
function _enrd_ruralstory_custom_bean() {
  if (!bean_load_delta('shareruralstoryintro')) {
    $bean = bean_create(['type' => 'enrd_bean']);
    $bean->label = 'Share your Rural Story Introduction';
    $bean->title = '';
    $bean->delta = 'shareruralstoryintro';
    $bean->save();
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function enrd_ruralstory_field_extra_fields() {
  // Add an extra field to show a go back button to submissions report page.
  $extra['enrd_sfr']['enrd_ruralstory']['display']['field_enrd_ruralstory_back_to_report'] = array(
    'label' => t('Back to Submissions Report'),
    'description' => t('Go back to submissions report admin page'),
    'weight' => 0,
  );

  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function enrd_ruralstory_entity_view($entity, $type, $view_mode, $langcode) {

  $is_set_view_mode = isset($type) && isset($entity->type) && isset($view_mode);

  if ($is_set_view_mode) {
    $is_enrd_sfr = $type == 'enrd_sfr';
    $is_enrd_ruralstory = $entity->type == ENRD_RURALSTORY_FORM;
    $is_full = $view_mode == 'full';
    $is_rural_story_page_detail = $is_enrd_sfr && $is_enrd_ruralstory && $is_full;
    // Add extra field in 'full' view mode.
    if ($is_rural_story_page_detail) {
      $entity->content['field_enrd_ruralstory_back_to_report'] = _enrd_ruralstory_sub_report_link();
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function enrd_ruralstory_views_pre_render(&$view) {
  // Customize "Rural Story submissions" Admin interface.
  if ($view->name == 'enrd_ruralstory_submissions_report_list' && $view->current_display == 'page') {
    $admin_page_path = $view->display['page']->display_options['path'];
    $field_subject_path = $view->field['field_enrd_ruralstory_subject']->options['alter']['path'];

    $query_parameters = drupal_get_query_parameters($_GET, ['q']);
    $query = drupal_http_build_query($query_parameters);
    $raw_decoded = rawurldecode($query);

    // Append params/destination to submission link.
    if (isset($admin_page_path) && isset($field_subject_path)) {
      // Check if there are query parameters.
      if (!empty($query)) {
        // Append query params at the end.
        $view->field['field_enrd_ruralstory_subject']->options['alter']['path'] = $field_subject_path . '?' . $raw_decoded;
      }
      else {
        // Append destination at the end.
        $view->field['field_enrd_ruralstory_subject']->options['alter']['path'] = $field_subject_path . '?destination=' . $admin_page_path;
      }
    }
  }
}

/**
 * Create dynamic "Rural Story" Submissions Report link.
 *
 * @return array
 *   A renderable array with the Rural Story Submission link.
 */
function _enrd_ruralstory_sub_report_link() {
  $query = drupal_get_query_parameters($_GET, array('q'));

  $element = [
    '#theme' => 'link',
    '#text' => t('Back to Submissions Report'),
    '#path' => url(ENRD_RURALSTORY_FORM_REPORT_VIEW_PATH, [
      'query' => $query,
      'absolute' => TRUE,
    ]),
    '#prefix' => '<div class="back-to-sub-report">',
    '#options' => [
      'attributes' => [
        'role' => 'button',
        'class' => [
          'btn',
          'btn-default',
          'admin-sub-report',
        ],
      ],
      'html' => FALSE,
    ],
    '#suffix' => '</div>',
    '#access' => user_access('manage enrd_ruralstory entity'),
  ];

  return $element;
}

/**
 * Implements hook_entity_presave().
 */
function enrd_ruralstory_entity_presave($entity, $type) {
  global $user;

  switch ($type) {

    case ENRD_SFR_ENTITY_NAME:
      $is_ruralstory = isset($entity->type) && $entity->type == ENRD_RURALSTORY_FORM;
      // Set properties on first submission cheking 'is_new' entity property.
      if ($is_ruralstory && $entity->is_new) {
        // Finalize ENRD Sfr entity Submission.
        $entity->finalize(FALSE);
      }
      break;

    case 'flagging':
      $is_ruralstory_flagging = isset($entity->flag_name) && $entity->flag_name == ENRD_RURALSTORY_STATUS_FLAG;
      // Add status field value on flagging entity.
      if ($is_ruralstory_flagging) {
        // Set the user who flagged the entity.
        $entity->{ENRD_RURALSTORY_STATUS_FLAG_USER}[LANGUAGE_NONE][0]['target_id'] = $user->uid;
        // Get parameter to search for status.
        $params = drupal_get_query_parameters();
        if (isset($params['status'])) {
          $status = $params['status'];
          // Set flag field value using the Entity API.
          $entity->{ENRD_RURALSTORY_STATUS_FIELD}[LANGUAGE_NONE][0]['value'] = $status;
        }
      }
      break;
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function enrd_ruralstory_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  $is_submissions_report = isset($form['#form_id']) && $form['#form_id'] == 'views_form_enrd_ruralstory_submissions_report_list_page';

  // Allow to bulk delete only if user has permission.
  if ($is_submissions_report) {
    // Buttons repositioning.
    $form['select']['action::_enrd_ruralstory_flag_status']['#weight'] = 0;
    $form['select']['rules_component::rules_enrd_ruralstory_remove_status']['#weight'] = 1;

    if (isset($form['select']['action::views_bulk_operations_delete_item'])) {
      $form['select']['action::views_bulk_operations_delete_item']['#access'] = user_access('delete enrd_ruralstory entity');
      // Button repositioning.
      $form['select']['action::views_bulk_operations_delete_item']['#weight'] = 2;
    }
  }
}

/**
 * Implements hook_action_info().
 */
function enrd_ruralstory_action_info() {
  // Set a custom VBO action to flag enrd_sfr content.
  return array(
    '_enrd_ruralstory_flag_status' => array(
      'type' => 'enrd_sfr',
      'label' => t('Set status'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Helper function to build list of options for status select.
 *
 * @param array $settings
 *   The $settings array with custom field default value.
 * @param array $form_state
 *   The $form_state array element.
 *
 * @return array
 *   Return an array with custom field settings.
 */
function _enrd_ruralstory_flag_status_form($settings, &$form_state) {
  $form = array();
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Select status'),
    '#options' => list_allowed_values(field_info_field(ENRD_RURALSTORY_STATUS_FIELD)),
    '#required' => TRUE,
    '#default_value' => !empty($settings['status']) ? $settings['status'] : '',
  );
  return $form;
}

/**
 * Custom VBO action form settings submit.
 *
 * @param array $form
 *   The $form array element.
 * @param array $form_state
 *   The $form_state array element.
 *
 * @return array
 *   Returns an array with custom option list field value.
 */
function _enrd_ruralstory_flag_status_submit($form, $form_state) {
  $return = [];
  $return['status'] = $form_state['values']['status'];

  return $return;
}

/**
 * Custom VBO action to flag an entity and set fields values.
 *
 * @param object $entity
 *   The entity object type passed to the VBO action.
 * @param array $context
 *   The $context array element with info about current operation.
 */
function _enrd_ruralstory_flag_status(&$entity, $context) {

  global $user;

  // Initialize Flag and custom fields variables.
  $flag = flag_get_flag(ENRD_RURALSTORY_STATUS_FLAG);
  $field_status = ENRD_RURALSTORY_STATUS_FIELD;
  $field_user = ENRD_RURALSTORY_STATUS_FLAG_USER;

  // Create an array containing the minimal flagging entity values.
  $values = [
    'fid' => $flag->fid,
    'entity_type' => $flag->entity_type,
    'entity_id' => $entity->sfrid,
  ];

  // Create the flagging using Entity API.
  $flagging = entity_create('flagging', $values);

  // Set field values.
  $flagging_wrapper = entity_metadata_wrapper('flagging', $flagging);
  $flagging_wrapper->{$field_status}->set($context['status']);
  $flagging_wrapper->{$field_user}->set($user->uid);

  // Invoke the Flag API to set the flagging.
  if (!$flag->is_flagged($entity->sfrid)) {
    // Entity is not yet flagged, so flag it directly.
    $flag->flag('flag', $entity->sfrid, $user, FALSE, $flagging);
  }
  else {
    // Unflag the entity before applying again the flag.
    $flag->flag('unflag', $entity->sfrid);
    $flag->flag('flag', $entity->sfrid, $user, FALSE, $flagging);
  }
}

/**
 * Implements hook_preprocess_flag().
 */
function enrd_ruralstory_preprocess_flag(&$variables) {

  if ($variables['flag']->name == ENRD_RURALSTORY_STATUS_FLAG) {

    // Get flagging entity data.
    $flagging = flag_get_entity_flags('enrd_sfr', $variables['entity_id'], ENRD_RURALSTORY_STATUS_FLAG);
    $flagging = reset($flagging);

    // Check if current entity id has flagging data.
    $load_status = !empty($flagging) && $flagging->entity_id == $variables['entity_id'];
    // Prepare status variables for flag template in non-admin UI.
    if ($load_status) {
      $flagging_data = entity_load_single('flagging', $flagging->flagging_id);
      // If entity has been flagged prepare label with flag status.
      if (!empty($flagging_data->{ENRD_RURALSTORY_STATUS_FIELD})) {
        $variables['flag_before'] = $flagging_data->{ENRD_RURALSTORY_STATUS_FIELD}[LANGUAGE_NONE][0]['value'];
        $variables['flag_before_class'] = str_replace(' ', '-', drupal_strtolower($variables['flag_before']));
        $variables['flag_wrapper_classes_array'][] = $variables['flag_before_class'];

        // Set the user who flagged the submission.
        if (!empty($flagging_data->field_enrd_ruralstory_flag_user[LANGUAGE_NONE][0]['target_id'])) {
          $variables['flag_username'] = '';
          $flag_user_obj = user_load($flagging_data->field_enrd_ruralstory_flag_user[LANGUAGE_NONE][0]['target_id']);

          if (!empty($flag_user_obj)) {
            $flag_username = $flag_user_obj->realname ? $flag_user_obj->realname : $flag_user_obj->name;
            $variables['flag_username_prefix'] = t('Set by');
            $variables['flag_username'] = $flag_username;
          }
        }

      }
    }
    else {
      $variables['flag_before'] = NULL;
      $variables['flag_username'] = NULL;
    }

    // Define empty item list variable.
    $variables['flag_list'] = NULL;

    // In case flag is not set, build an item list with possible status values.
    if ($variables['status'] == 'unflagged') {

      // Define the identifier for the collapsed element.
      if (isset($variables['flag_wrapper_classes_array'][2])) {
        // This key element holds the univocal flag element identifier.
        $variables['flag_identifier'] = $variables['flag_wrapper_classes_array'][2];
      }

      // Get list of available field values.
      $status_field = field_info_field(ENRD_RURALSTORY_STATUS_FIELD);
      $allowed_values = array_keys(list_allowed_values($status_field));
      $t = get_t();

      // Build the item list.
      $list = [];
      $list['type'] = 'ul';
      $list['attributes'] = [
        'class' => $variables['flag_wrapper_classes_array'],
      ];
      $list['items'] = [];
      foreach ($allowed_values as $value) {
        $list['items'][] = l($t($value), $variables['link']['href'], [
          'query' => [
            'destination' => $variables['link']['query']['destination'],
            // Parameter from the status field.
            'status' => $value,
            'token' => $variables['link']['query']['token'],
          ],
          'attributes' => [
            'class' => $variables['flag_classes_array'],
            'rel' => 'nofollow',
          ],
        ]);
      }
      $variables['flag_list'] = theme('item_list', $list);
    }
  }
}

/**
 * Implements hook_admin_paths_alter().
 */
function enrd_ruralstory_admin_paths_alter(&$paths) {
  // Show report page in non-admin theme.
  $paths[ENRD_RURALSTORY_FORM_REPORT_VIEW_PATH] = FALSE;
}

/**
 * Implements hook_enrd_sfr_finalize().
 */
function enrd_ruralstory_enrd_sfr_finalize($enrd_sfr) {
  if ($enrd_sfr->type == ENRD_RURALSTORY_FORM) {
    // Show custom confirmation message on finalization.
    enrd_sfr_set_confirmation_msg(t('Your rural story has been submitted correctly.'));
  }
}

/**
 * Implements template_preprocess_field().
 */
function enrd_ruralstory_preprocess_field(&$variables) {
  $element = $variables['element'];

  $is_enrd_sfr = isset($element['#entity_type']) && $element['#entity_type'] == ENRD_SFR_ENTITY_NAME;
  $is_ruralstory = isset($element['#bundle']) && $element['#bundle'] == ENRD_RURALSTORY_FORM;
  $is_full_email = isset($element['#view_mode']) && $element['#view_mode'] == 'enrd_sfr_full_email';

  // Create theme suggestion for each display of ENRD Sfr Ruralstory.
  if ($is_enrd_sfr && $is_ruralstory && $is_full_email) {
    $wrapped_fields = [
      'field_enrd_ruralstory_links',
      'field_enrd_ruralstory_files',
      'field_enrd_ruralstory_short_desc',
    ];
    // General theme for display fields.
    $variables['theme_hook_suggestions'][] = 'field__' . $element['#entity_type'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];

    // Add wrapper around Short description, Links and Files fields.
    if (in_array($element['#field_name'], $wrapped_fields)) {
      $variables['theme_hook_suggestions'][] = 'field__' . $element['#entity_type'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'] . '__wrapped';
    }
  }
}

/**
 * Implements hook_file_entity_access().
 */
function enrd_ruralstory_file_entity_access($op, $file, $account) {

  if ($op == 'download' || $op == 'view') {
    // Check if user can view Rural Story Submissions.
    if ((!user_access('administer files', $account)) && user_access('view enrd_ruralstory entity', $account)) {

      if (!empty($file)) {
        $query = new EntityFieldQuery();
        $result = $query->entityCondition('entity_type', 'enrd_sfr')
          ->entityCondition('bundle', 'enrd_ruralstory')
          ->fieldCondition('field_enrd_ruralstory_files', 'fid', $file->fid, '=')
          ->execute();

        // Allow to download or view rural files.
        if (!empty($result['enrd_sfr'])) {
          return FILE_ENTITY_ACCESS_ALLOW;
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function enrd_ruralstory_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // Alter the behavior of the "Delete" confirmation form.
  if (isset($form['delete'])) {
    $query = new EntityFieldQuery();
    $rural_stories_query = $query->entityCondition('entity_type', ENRD_SFR_ENTITY_NAME)
      ->entityCondition('bundle', ENRD_RURALSTORY_FORM)
      ->fieldCondition('field_enrd_ruralstory_topic', 'tid', $form['tid']['#value'], '=');
    $count_query = clone $rural_stories_query;

    // Get the latest Rural Stories referenced by the term.
    $rural_stories = $rural_stories_query->propertyOrderBy('created', 'DESC')
      ->range(0, 10)
      ->execute();
    // Get the tot. num. of Rural Stories referenced by the term.
    $count = $count_query->count()->execute();

    // Apply the behavior only if term references something.
    if ($count > 0) {

      if (!empty($rural_stories)) {

        // Load the Rural Stories from the range.
        $enrd_sfr_rural_stories = enrd_sfr_load_multiple(array_keys($rural_stories['enrd_sfr']));
        foreach ($enrd_sfr_rural_stories as $story) {
          // Show the "Subject" field of each Rural Story.
          $items[] = l($story->field_enrd_ruralstory_subject[LANGUAGE_NONE][0]['value'], ENRD_RURALSTORY_PAGE_PATH . '/' . $story->sfrid, ['attributes' => ['target' => '_blank']]);
        }
        // If the tot. num. of Rural Stories is more, show count of other items.
        if ($count > 10) {
          $more_count = $count - count($rural_stories['enrd_sfr']);
          $items[] = t('...and %count more.', array('%count' => $more_count));
        }
        // Show the list of Rural Stories.
        $rural_story_plural = format_plural(count($rural_stories['enrd_sfr']), 'rural story', '@count rural stories');
        $markup = theme('item_list', [
          'items' => $items,
          'title' => t('Caution: this term is being referenced by the following %count:', ['%count' => $rural_story_plural]),
        ]);

        $form['description']['#markup'] .= '<br>' . $markup;

      }

    }
  }
}
