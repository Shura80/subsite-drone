<?php

/**
 * @file
 * Code for the AGRI Administrations feature.
 */

include_once 'agri_administrations.features.inc';

/**
 * Implements hook_rules_action_info().
 */
function agri_administrations_rules_action_info() {

  $actions = array(
    'agri_send_email_to_group_editors' => array(
      'label' => t('Get group editors from group audience'),
      'group' => t('AGRI Administrations'),
      'configurable' => TRUE,
      'parameter' => array(
        'group_content' => array(
          'type' => 'entity',
          'label' => t('Group content'),
          'description' => t('The group content determining the group audience.'),
        ),
      ),
      'provides' => array(
        'group_editors' => array(
          'type' => 'list<user>',
          'label' => t('List of group editors'),
        ),
      ),
      'base' => '_agri_administrations_rules_get_editors',
    ),
    'agri_send_email_to_group_admins' => array(
      'label' => t('Get group admins from group audience'),
      'group' => t('AGRI Administrations'),
      'configurable' => TRUE,
      'parameter' => array(
        'group_content' => array(
          'type' => 'entity',
          'label' => t('Group content'),
          'description' => t('The group content determining the group audience.'),
        ),
      ),
      'provides' => array(
        'group_admins' => array(
          'type' => 'list<user>',
          'label' => t('List of group admins'),
        ),
      ),
      'base' => '_agri_administrations_rules_get_admins',
    ),
  );

  return $actions;

}

/**
 * Get rid from og_role table.
 *
 * @param string $group
 *   The name of the OG group.
 * @param string $role
 *   The name of the OG role.
 *
 * @return int
 *   Returns the role id.
 */
function _agri_administrations_get_group_role($group, $role) {
  $rid = db_select('og_role', 'og')
    ->fields('og', array('rid'))
    ->condition('og.name', $role)
    ->condition('og.group_bundle', $group)
    ->execute()->fetchField();

  return $rid;
}

/**
 * Helper function to get list of users with a certain role in a group.
 *
 * @param object $group_content
 *   The group content type.
 *
 * @return mixed
 *   Return the users' list of a OG role.
 */
function _agri_administrations_rules_get_editors($group_content) {

  if (!isset($group_content->og_membership)) {
    // Not a group content.
    return;
  }

  $members = array();
  foreach ($group_content->og_membership->value() as $og_membership) {
    // Get the group members the group content belongs to.
    $current_members = db_select('og_membership', 'om');
    $current_members->join('og_users_roles', 'ogur', 'om.etid = ogur.uid');
    $current_members->fields('om', array('etid'));
    $current_members->condition('om.gid', $og_membership->gid);
    $current_members->condition('om.entity_type', 'user');
    $current_members->condition('ogur.rid',
      _agri_administrations_get_group_role("administration", "group editor")
    );

    $result = $current_members->execute();
    while ($res = $result->fetchAssoc()) {
      $members[] = $res['etid'];
    }
  }

  // Remove duplicate items.
  $members = array_keys(array_flip($members));
  return array('group_editors' => $members);

}

/**
 * Helper function to get list of users with a certain role in a group.
 *
 * @param object $group_content
 *   The group content type.
 *
 * @return mixed
 *   Return the users' list of a OG role.
 */
function _agri_administrations_rules_get_admins($group_content) {

  if (!isset($group_content->og_membership)) {
    // Not a group content.
    return;
  }

  $members = array();
  foreach ($group_content->og_membership->value() as $og_membership) {
    // Get the group members the group content belongs to.
    $current_members = db_select('og_membership', 'om');
    $current_members->join('og_users_roles', 'ogur', 'om.etid = ogur.uid');
    $current_members->fields('om', array('etid'));
    $current_members->condition('om.gid', $og_membership->gid);
    $current_members->condition('om.entity_type', 'user');
    $current_members->condition('ogur.rid',
      _agri_administrations_get_group_role("administration", "administrator member")
    );

    $result = $current_members->execute();
    while ($res = $result->fetchAssoc()) {
      $members[] = $res['etid'];
    }
  }

  // Remove duplicate items.
  $members = array_keys(array_flip($members));
  return array('group_admins' => $members);

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_administrations_form_og_ui_add_users_alter(&$form, &$form_state) {
  // Only website administrators should be able to grant administrator
  // role in administration collaborative groups.
  if (!_agri_administrations_verify_role_grant()) {
    $option_to_hide = array_search('administrator member', $form['og_user']['roles']['#options']);
    if (!empty($option_to_hide)) {
      $form['og_user']['roles'][$option_to_hide]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function agri_administrations_form_og_ui_edit_membership_alter(&$form, &$form_state) {
  // Only website administrators should be able to grant administrator
  // role in administration collaborative groups.
  if (!_agri_administrations_verify_role_grant()) {
    $option_to_hide = array_search('administrator member', $form['og_user']['roles']['#options']);
    if (!empty($option_to_hide)) {
      $form['og_user']['roles'][$option_to_hide]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_og_role_grant().
 */
function agri_administrations_og_role_grant($entity_type, $gid, $uid, $rid) {
  $entity = entity_load_single($entity_type, $gid);
  if ($entity->type != 'administration') {
    return FALSE;
  }

  if (!_agri_administrations_verify_role_grant()) {

    $admin_role = 'administrator member';
    $roles_name = og_get_user_roles_name(array($rid));
    $user = user_load($uid);

    if (in_array($admin_role, $roles_name)) {
      og_role_revoke($entity_type, $gid, $uid, $rid);
      drupal_set_message(t(
        'You do not have permission to grant to the user %name the role of %role. Operation is not performed.',
        array(
          '%role' => $admin_role,
          '%name' => $user->name,
        )),
        'warning');
    }
  }
}

/**
 * Check if the user can assign the administrator role in "administration".
 *
 * @return bool
 *   TRUE if current user can assign role. FALSE otherwise.
 */
function _agri_administrations_verify_role_grant() {
  if ($context = og_context()) {
    global $user;

    $user_og_roles = og_get_user_roles($context['group_type'], $context['gid']);
    $user_roles = $user->roles;

    if (in_array('administrator member', $user_og_roles) || in_array('administrator', $user_roles)) {
      $role_grant = TRUE;
    }
    else {
      $role_grant = FALSE;
    }

    if (!$role_grant && $user->uid != 1) {
      return FALSE;
    }

    return TRUE;
  }
}
