<?php

/**
 * @file
 * Install file of the agri_news feature.
 */

include_once 'agri_publications.install.inc';

/**
 * Implements hook_install().
 */
function agri_publications_install() {

  // Revert sensitive AGRI Publications components.
  features_revert(array('agri_publications' => array('taxonomy', 'variable')));

  // Import default terms.
  foreach (_agri_publications_get_default_publication_type_terms() as $name) {
    _agri_core_api_create_term('publication_type', $name);
  }
  _agri_publications_set_permissions();

  features_revert(array(
    'agri_publications' => array(
      'conditional_fields',
      'variable',
    ),
  ));
}

/**
 * Implements hook_enable().
 */
function agri_publications_enable() {
  drupal_set_message(t('Agri Publications feature is now active on your site.'));
}

/**
 * Implements hook_disable().
 */
function agri_publications_disable() {
  drupal_set_message(t('Agri Publications %v feature is now inactive on your site.'));
}

/**
 * Import default publication type terms.
 */
function agri_publications_update_7001() {

  features_revert(array('agri_publications' => array('taxonomy', 'variable')));
  foreach (_agri_publications_get_default_publication_type_terms() as $name) {
    _agri_core_api_create_term('publication_type', $name);
  }
}

/**
 * Import additional publication type terms.
 */
function agri_publications_update_7002() {

  features_revert(array('agri_publications' => array('taxonomy', 'variable')));
  $terms = array(
    "Press Article",
    "Scientific journal",
    "Periodical",
    "Thematic Article",
    "Scientific Article",
    "Book",
    "Magazine",
    "Fact-sheet",
    "Good-practice paper",
    "Report",
    "Study",
  );
  foreach ($terms as $name) {
    _agri_core_api_create_term('publication_type', $name);
  }
}

/**
 * Restore permissions.
 */
function agri_publications_update_7003() {
  _agri_publications_set_permissions();
}

/**
 * Add a field.
 */
function agri_publications_update_7004() {
  features_revert(array('agri_publications' => array('field')));
}

/**
 * QA Fixes Date field migration.
 *
 * Update datetime fields to datestamp.
 * taken From update 7193 of cce_basic_config and adapted to Features API 2.0
 */
function agri_publications_update_7005() {

  // $content type : content type that contains fields to replace.
  // $module_name : module that contains fields.
  $content_type = 'publication';
  $module_name = drupal_basename(__FILE__, '.install');
  // Get db fields instances of content type.
  $fields_instances = field_info_instances('node', $content_type);

  // Get feature fields config&instance.
  module_load_include('inc', $module_name, $module_name . '.features.field_base');
  if (function_exists($module_name . '_field_default_field_bases')) {
    $fields_features_info = call_user_func($module_name . '_field_default_field_bases');
  }

  // Migration.
  foreach ($fields_instances as $field_name => $field_instance) {
    // Get db field config.
    $field_info = field_info_field($field_name);
    // Get feature field config.
    $field_features_info = NULL;

    if (isset($fields_features_info[$field_name])) {
      $field_features_info = $fields_features_info[$field_name]['settings'];
    }

    // Update only our fields defines to 'datestamp' in feature.field.
    if ($field_info['type'] == 'datetime' && $field_info['locked']) {
      foreach ($field_info['storage']['details']['sql'] as $info_sql) {
        $table_name = array_shift(array_keys($info_sql));

        foreach ($info_sql[$table_name] as $column_name) {

          if (field_has_data($field_info)) {
            // There is data: migrate data and update column to int.
            watchdog('system',
              'Update the  column %column of table %table: migrate datas and update to datestamp.',
              array(
                '%column' => $column_name,
                '%table' => $table_name,
              ), WATCHDOG_WARNING
            );
            // Create a temporary date field.
            $param = array('type' => 'int', 'not null' => FALSE, 'default' => 0);
            db_add_field($table_name, $column_name . '_temp', $param);

            db_update($table_name)
              ->expression($column_name . '_temp', "UNIX_TIMESTAMP($column_name)")
              ->execute();

            // Delete old column.
            db_drop_field($table_name, $column_name);
            db_change_field($table_name, $column_name . '_temp', $column_name, array('type' => 'int'));

          }
          else {
            // If there is no data: just update column to int.
            watchdog('system', 'Update the  column %column of %table: update to datestamp.',
              array(
                '%column' => $column_name,
                '%table' => $table_name,
              ), WATCHDOG_WARNING
            );
            db_change_field($table_name, $column_name, $column_name, array('type' => 'int'));
          }
        }
      }

      watchdog('system', 'Saving field config of %field',
         array(
           '%field' => $field_name,
         ), WATCHDOG_WARNING
      );
      db_update('field_config')->fields(array('type' => 'datestamp'))->condition('id', $field_info['id'])->execute();

      // Error logs.
    }
    elseif ($field_info['type'] == 'datestamp') {
      watchdog('system',
        'Field %field has been already converted to UNIX timestamp',
        array(
          '%field' => $field_name,
        ), WATCHDOG_WARNING
      );

    }
    elseif ($field_info['type'] == 'datetime') {
      if (!$field_features_info) {
        watchdog('system',
          'Field %field not found in %module features.field_base.inc',
          array(
            '%module' => $module_name,
          ), WATCHDOG_WARNING
        );
      }
      elseif ($field_features_info['type'] != 'datestamp') {
        watchdog('system',
          'Field %field is not a datestamp in %module features.field_base.inc',
          array(
            '%field' => $field_name,
            '%module' => $module_name,
          ), WATCHDOG_WARNING
        );
      }
    }
  }
  field_cache_clear();

}
